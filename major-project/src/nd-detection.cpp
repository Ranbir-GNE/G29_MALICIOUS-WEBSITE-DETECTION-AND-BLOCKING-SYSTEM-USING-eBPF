// Netify Agent
// Copyright (C) 2015-2024 eGloo Incorporated
// <http://www.egloo.ca>
//
// This program is free software: you can redistribute it
// and/or modify it under the terms of the GNU General
// Public License as published by the Free Software
// Foundation, either version 3 of the License, or (at your
// option) any later version.
//
// This program is distributed in the hope that it will be
// useful, but WITHOUT ANY WARRANTY; without even the
// implied warranty of MERCHANTABILITY or FITNESS FOR A
// PARTICULAR PURPOSE.  See the GNU General Public License
// for more details.
//
// You should have received a copy of the GNU General Public
// License along with this program.  If not, see
// <http://www.gnu.org/licenses/>.

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif

// included added by Neb
#include <linux/bpf.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <bpf/libbpf.h>
#include <bpf/bpf.h>
#include <net/if.h> // to find ifindex
#include <string>
#include <iostream>
#include <arpa/inet.h>

#include <mutex>

#include <netinet/in.h>

#include "nd-apps.hpp"
#include "nd-detection.hpp"
#include "nd-except.hpp"
#include "nd-fhc.hpp"
#include "nd-protos.hpp"
#include "nd-risks.hpp"
#include "nd-sha1.h"
#include "nd-tls-alpn.hpp"
#include "nd-util.hpp"

#include "ndpi_protocol_ids.h"

using namespace std;
int map_fd; // used in nd-instance.cpp as extern
int youtube_map_ptr; // used in nd-instance.cpp as extern
std::unordered_map<std::string, int> ip_user_mapping;
unordered_map<int, unordered_set<string>> user_blocked_websites;
unordered_map<int, unordered_set<int>> blocked_applications;
unordered_map<int, unordered_set<int>> blocked_protocols;
std::string last_interface;


// Enable flow hash cache debug logging
// #define _ND_LOG_FHC 1

// Enable extra flow debug logging
// #define _ND_LOG_FLOW_DEBUG 1

// Enable to log STUN debug
// #define _ND_LOG_STUN 1

#define ndEF    entry->flow
#define ndEFNF  entry->flow->ndpi_flow
#define ndEFNFP entry->flow->ndpi_flow->protos

ndDetectionThread::ndDetectionThread(int16_t cpu, const string &tag,
#ifdef _ND_ENABLE_NETLINK
  ndNetlink *netlink,
#endif
#ifdef _ND_ENABLE_CONNTRACK
  ndConntrackThread *thread_conntrack,
#endif
  ndDNSHintCache *dhc, ndFlowHashCache *fhc, uint8_t private_addr)
  : ndThread(tag, (long)cpu, true), ndInstanceClient(),
#ifdef _ND_ENABLE_NETLINK
    netlink(netlink),
#endif
#ifdef _ND_ENABLE_CONNTRACK
    thread_conntrack(thread_conntrack),
#endif
    ndpi(nullptr), dhc(dhc), fhc(fhc) {
    Reload();

    private_addrs.first.ss_family = AF_INET;
    nd_private_ipaddr(private_addr, private_addrs.first);

    private_addrs.second.ss_family = AF_INET6;
    nd_private_ipaddr(private_addr, private_addrs.second);

    int rc;

    pthread_condattr_t cond_attr;

    pthread_condattr_init(&cond_attr);
    pthread_condattr_setclock(&cond_attr, CLOCK_MONOTONIC);
    if ((rc = pthread_cond_init(&pkt_queue_cond, &cond_attr)) != 0)
    {
        throw ndExceptionSystemErrno(__PRETTY_FUNCTION__,
          "pthread_cond_init", rc);
    }
    pthread_condattr_destroy(&cond_attr);

    if ((rc = pthread_mutex_init(&pkt_queue_cond_mutex, nullptr)) != 0)
    {
        throw ndExceptionSystemErrno(__PRETTY_FUNCTION__,
          "pthread_mutex_init", rc);
    }

    nd_dprintf("%s: detection thread created on CPU: %hu\n",
      tag.c_str(), cpu);
}

ndDetectionThread::~ndDetectionThread() {
    pthread_cond_broadcast(&pkt_queue_cond);

    Join();

    pthread_cond_destroy(&pkt_queue_cond);
    pthread_mutex_destroy(&pkt_queue_cond_mutex);

#ifdef _ND_ENABLE_DEBUG_STATS
    uint64_t pkts_flushed = 0;
#endif
    while (pkt_queue.size()) {
        ndDetectionQueueEntry *entry = pkt_queue.front();
        pkt_queue.pop();

        delete entry;
#ifdef _ND_ENABLE_DEBUG_STATS
        pkts_flushed++;
#endif
    }

    if (ndpi != nullptr) nd_ndpi_free(ndpi);

    nd_dprintf("%s: detection thread destroyed.\n", tag.c_str());
#ifdef _ND_ENABLE_DEBUG_STATS
    nd_dprintf(
      "%s: %llu flows, %llu pkts, %llu pkts flushed, max "
      "pkts queued: %llu, max pkts queue size: %llu MB.\n",
      tag.c_str(), flows, pkts, pkts_flushed,
      max_queued_pkts, (max_queued_size / 1024 / 1024));
#endif
}

void ndDetectionThread::Reload(void) {
    if (ndpi != nullptr) nd_ndpi_free(ndpi);
    ndpi = nd_ndpi_init();
}

void ndDetectionThread::QueuePacket(nd_flow_ptr &flow,
  const ndPacket *packet,
  const uint8_t *data,
  uint16_t length) {
    ndDetectionQueueEntry *entry = new ndDetectionQueueEntry(
      flow, packet, data, length);

    Lock();

    pkt_queue.push(entry);

#ifdef _ND_ENABLE_DEBUG_STATS
    pkts++;
    queued_pkts++;
    queued_size += (entry->length + sizeof(ndDetectionQueueEntry));

    max_queued_pkts = max(max_queued_pkts, queued_pkts);
    max_queued_size = max(max_queued_size, queued_size);
#endif
    Unlock();

    int rc;
    if ((rc = pthread_cond_broadcast(&pkt_queue_cond)) != 0) {
        throw ndExceptionSystemErrno(__PRETTY_FUNCTION__,
          "pthread_cond_broadcast", rc);
    }
}

void *ndDetectionThread::Entry(void) {
    int rc;

    do {
        if ((rc = pthread_mutex_lock(&pkt_queue_cond_mutex)) != 0)
        {
            throw ndExceptionSystemErrno(__PRETTY_FUNCTION__,
              "pthread_mutex_lock", rc);
        }

        struct timespec ts_cond;
        if (clock_gettime(CLOCK_MONOTONIC, &ts_cond) != 0) {
            throw ndExceptionSystemError(__PRETTY_FUNCTION__,
              "clock_gettime");
        }

        ts_cond.tv_sec += 1;

        if ((rc = pthread_cond_timedwait(&pkt_queue_cond,
               &pkt_queue_cond_mutex, &ts_cond)) != 0 &&
          rc != ETIMEDOUT)
        {
            throw ndExceptionSystemErrno(__PRETTY_FUNCTION__,
              "pthread_cond_timedwait", rc);
        }

        if ((rc = pthread_mutex_unlock(&pkt_queue_cond_mutex)) != 0)
        {
            throw ndExceptionSystemErrno(__PRETTY_FUNCTION__,
              "pthread_mutex_unlock", rc);
        }

        ProcessPacketQueue();
    }
    while (ShouldTerminate() == false);

    ProcessPacketQueue();

    nd_dprintf("%s: detection thread ended on CPU: %hu\n",
      tag.c_str(), cpu);

    return nullptr;
}

ndProto::Id ndDetectionThread::ProtocolLookup(uint16_t id,
  ndDetectionQueueEntry *entry) {
    if (id == NDPI_PROTOCOL_UNKNOWN)
        return ndProto::Id::UNKNOWN;

    auto it = ndProto::nDPI::Protos.find(id);
    if (it == ndProto::nDPI::Protos.end())
        return ndProto::Id::TODO;

    auto it_pm = ndProto::PortMap.find(it->second);
    if (it_pm != ndProto::PortMap.end()) {
        for (auto &it_entry : it_pm->second) {
            if (ndEF->lower_addr.GetPort() != it_entry.first &&
              ndEF->upper_addr.GetPort() != it_entry.first)
                continue;
            return it_entry.second;
        }
    }

    return it->second;
}

void ndDetectionThread::ProcessPacketQueue(void) {
    ndDebugLogStream dls(ndDebugLogStream::Type::FLOW);
    ndDetectionQueueEntry *entry;

    do {
        Lock();

        if (pkt_queue.size()) {
            entry = pkt_queue.front();
            pkt_queue.pop();
#ifdef _ND_ENABLE_DEBUG_STATS
            queued_pkts--;
            queued_size -= (entry->length +
              sizeof(ndDetectionQueueEntry));
#endif
        }
        else entry = nullptr;

        Unlock();

        if (entry != nullptr) {
            if (ndEF->stats.detection_packets.load() == 0 ||
              (ndEF->flags.detection_complete.load() == false &&
                ndEF->flags.expiring.load() == false &&
                ndEF->stats.detection_packets.load() <
                  ndGC.max_detection_pkts))
            {
                ndEF->stats.detection_packets++;

              ProcessPacket(entry);
              if(true) {
                // dls << "Processing packet line 265\n";
                std::cout << "-----------------------------------type: flow\n"
                  // << "interface: ens34\n"
                  // << "internal: true\n"
                  // << "established: false\n"
                  // << "flow: {\n"
                  << "  category: {\n"
                  << "    application: " << ndEF->category.application << ",\n"
                  << "    domain: " << ndEF->category.domain << ",\n"
                  << "    protocol: " << ndEF->category.protocol << "\n"
                  // << "  },\n"
                  // << "  risks: {\n"
                  // << "    ndpi_risk_score: " << ndEF->risk.ndpi_score << ",\n"
                  // << "    ndpi_risk_score_client: " << ndEF->risk.ndpi_score_client << ",\n"
                  // << "    ndpi_risk_score_server: " << ndEF->risk.ndpi_score_server << ",\n"
                //   << "    risks: [ ";
                // for (auto it = ndEF->risk.risks.begin(); it != ndEF->risk.risks.end(); ++it) {
                //   if (it != ndEF->risk.risks.begin()) dls << ", ";
                //   dls << *it;
                // }
                  // << " ]\n"
                  // << "  },\n"
                  // << "  digest: \"" << this->flow_digest << this->flow_digest_mdata << "\",\n"
                  // << "  ip_nat: " << (ndEF->ip_nat ? "true" : "false") << "\n"
                  << "  ip_version: " << (int)ndEF->ip_version << ",\n"
                  << "  ip_protocol: " << (int)ndEF->ip_protocol << ",\n"
                  << "  vlan_id: " << ndEF->vlan_id << ",\n"
                  // << "  other_type: \"remote\",\n"
                  // << "  local_origin: " << (ndEF->local_origin ? "true" : "false") << ",\n"
                  // << "  other_mac: \"" << ndEF->upper_mac.GetString() << "\",\n"
                  // << "  local_mac: \"" << ndEF->lower_mac.GetString() << "\",\n"
                  // << "  other_ip: \"" << ndEF->upper_addr.GetString() << "\",\n"
                  // << "  local_ip: \"" << ndEF->lower_addr.GetString() << "\",\n"
                  // << "  other_port: " << ndEF->upper_addr.GetPort() << ",\n"
                  // << "  local_port: " << ndEF->lower_addr.GetPort() << ",\n"
                  << "  detected_protocol: " << (int)ndEF->detected_protocol << ",\n"
                  << "  detected_protocol_name: \"" << ndEF->detected_protocol_name << "\",\n"
                  << "  detected_application: " << ndEF->detected_application << ",\n"
                  << "  detected_application_name: \"" << ndEF->detected_application_name << "\",\n"
                  << "  detection_guessed: " << (ndEF->flags.detection_guessed ? "true" : "false") << ",\n"
                  << "  ssl: {\n"
                  << "    alpn: [ ";
                for (auto it = ndEF->tls.alpn.begin(); it != ndEF->tls.alpn.end(); ++it) {
                  if (it != ndEF->tls.alpn.begin()) std::cout << ", ";
                  std::cout << "\"" << *it << "\"";
                }
                std::cout << " ],\n"
                  << "    alpn_server: [ ";
                for (auto it = ndEF->tls.alpn_server.begin(); it != ndEF->tls.alpn_server.end(); ++it) {
                  if (it != ndEF->tls.alpn_server.begin()) std::cout << ", ";
                  std::cout << "\"" << *it << "\"";
                }
                std::cout << " ],\n"
                  // << "    version: \"" << ndEF->tls.version << "\",\n"
                  // << "    cipher_suite: \"" << ndEF->tls.cipher_suite << "\",\n"
                  << "    client_sni: \"" << ndEF->host_server_name << "\",\n"
                  << "    server_cn: \"" << ndEF->tls.server_cn << "\",\n"
                  // << "    client_ja3: \"" << ndEF->tls.client_ja3 << "\",\n"
                  // << "    server_ja3: \"" << ndEF->tls.server_ja3 << "\",\n"
                  << "    issuer_dn: \"" << ndEF->tls.issuer_dn << "\",\n"
                  << "    subject_dn: \"" << ndEF->tls.subject_dn << "\"\n"
                  << "  },\n"
                  // << "  first_seen_at: " << ndEF->first_seen_at << ",\n"
                  // << "  first_update_at: " << ndEF->first_update_at << ",\n"
                  // << "  last_seen_at: " << ndEF->last_seen_at << "\n"
                  // << "}\n";
                ;
                }
            }
        // block_website(ndEF->lower_addr.GetString(), ndEF->upper_addr.GetString(), ndEF->lower_addr.GetPort(), ndEF->upper_addr.GetPort());
        int user_id = ip_user_mapping[ndEF->upper_addr.GetString()];

        std::cout << "User id is: " << user_id << " IP is: " << ndEF->upper_addr.GetString() << std::endl;

        if(blocked_protocols[user_id].find((int)ndEF->detected_protocol) != blocked_protocols[user_id].end()) {
          block_website(ndEF->lower_addr.GetString(), ndEF->upper_addr.GetString(), ndEF->lower_addr.GetPort(), ndEF->upper_addr.GetPort());
        }
        if(blocked_applications[user_id].find(ndEF->detected_application) != blocked_applications[user_id].end()) {
          block_website(ndEF->lower_addr.GetString(), ndEF->upper_addr.GetString(), ndEF->lower_addr.GetPort(), ndEF->upper_addr.GetPort());
          if(false && ndEF->detected_application == 124) {
            __be32 detcted_ip = convertIpToBe32(ndEF->upper_addr.GetString());
            int value = 1;
            bpf_map_update_elem(youtube_map_ptr, &detcted_ip, &value, BPF_ANY);
          }
        }
        if(user_blocked_websites[user_id].find(ndEF->host_server_name) != user_blocked_websites[user_id].end()) {
          block_website(ndEF->lower_addr.GetString(), ndEF->upper_addr.GetString(), ndEF->lower_addr.GetPort(), ndEF->upper_addr.GetPort());
        }

        // if(ndEF->detected_application == 124) {
        //     // std::cout << "Attempting to block the youtube\n";
        //     // std::cout << "Blocking website with the following details:" << std::endl;
        //     // std::cout << "Lower Address: " << ndEF->lower_addr.GetString() << " (Type: " << typeid(ndEF->lower_addr.GetString()).name() << ")" << std::endl;
        //     // std::cout << "Upper Address: " << ndEF->upper_addr.GetString() << " (Type: " << typeid(ndEF->upper_addr.GetString()).name() << ")" << std::endl;
        //     // std::cout << "Lower Port: " << ndEF->lower_addr.GetPort() << " (Type: " << typeid(ndEF->lower_addr.GetPort()).name() << ")" << std::endl;
        //     // std::cout << "Upper Port: " << ndEF->upper_addr.GetPort() << " (Type: " << typeid(ndEF->upper_addr.GetPort()).name() << ")" << std::endl;
        //     block_website(ndEF->lower_addr.GetString(), ndEF->upper_addr.GetString(), ndEF->lower_addr.GetPort(), ndEF->upper_addr.GetPort());
        // }

            if (ndEF->stats.detection_packets.load() ==
                ndGC.max_detection_pkts ||
              (ndEF->flags.expiring.load() &&
                ndEF->flags.expired.load() == false))
            {
                lock_guard<recursive_mutex> lg(ndEF->lock);

                if (ndEFNF != nullptr) {
                    if (entry->packet != nullptr)
                        ProcessPacket(entry);

                    if (ndEF->flags.detection_init.load() == false)
                        DetectionUpdate(entry);

                    if (ndEF->detected_protocol == ndProto::Id::UNKNOWN)
                        DetectionGuess(entry);
                }

                DetectionComplete(entry);

                if (ndEF->flags.expiring.load()) {
                    ndEF->flags.expired = true;
                    ndEF->flags.expiring = false;
                }
            }

            if (ndEF->flags.detection_complete.load())
                ndEF->Release();

            delete entry;
        }
    }
    while (entry != nullptr);
}

void ndDetectionThread::ProcessPacket(ndDetectionQueueEntry *entry) {
    if (ndEFNF == nullptr) {
        lock_guard<recursive_mutex> lg(ndEF->lock);

        ProcessFlow(entry);

        if (fhc != nullptr && ! ndEF->flags.fhc_hit.load() &&
          ndEF->ip_protocol != IPPROTO_ICMP &&
          ndEF->ip_protocol != IPPROTO_ICMPV6 &&
          ndEF->ip_protocol != IPPROTO_IGMP)
        {
            ndFlowHashCacheEntry result;
            if (fhc->Lookup(ndEF->digest_lower, result)) {
                if (result.proto_id != ndProto::Id::UNKNOWN) {
#ifdef _ND_LOG_FHC
                    string proto_from = ndProto::GetName(
                      ndEF->detected_protocol);
                    string proto_to = ndProto::GetName(
                      result.proto_id);
                    nd_dprintf(
                      "%s: FHC: updated proto from cache: "
                      "%s -> %s\n",
                      tag.c_str(), proto_from.c_str(),
                      proto_to.c_str());
#endif
                    SetDetectedProtocol(entry, result.proto_id);
                }

                if (result.app_id != ND_APP_UNKNOWN) {
#ifdef _ND_LOG_FHC
                    string app_from;
                    ndi.apps.Lookup(
                      ndEF->detected_application, app_from);
                    string app_to;
                    ndi.apps.Lookup(result.app_id, app_to);
                    nd_dprintf(
                      "%s: FHC: updated app from cache: "
                      "%s -> %s\n",
                      tag.c_str(), app_from.c_str(),
                      app_to.c_str());
#endif
                    SetDetectedApplication(entry, result.app_id);
                }

                ndEF->digest_mdata.push_back(result.digest);

                ndEF->flags.fhc_hit = true;

                DetectionUpdate(entry);
                DetectionComplete(entry);

                return;
            }
        }

        ndEFNF = (ndpi_flow_struct *)ndpi_malloc(
          sizeof(ndpi_flow_struct));
        if (ndEFNF == nullptr) {
            throw ndExceptionSystemError(__PRETTY_FUNCTION__,
              "ndpi_malloc");
        }

        memset(ndEFNF, 0, sizeof(ndpi_flow_struct));
    }

    ndpi_protocol ndpi_rc = ndpi_detection_process_packet(ndpi,
      ndEFNF, entry->data, entry->length,
      ndEF->ts_last_seen.load(), nullptr);

    lock_guard<recursive_mutex> lg(ndEF->lock);

    if (ndpi_rc.master_protocol == NDPI_PROTOCOL_STUN &&
      ndpi_rc.app_protocol != NDPI_PROTOCOL_UNKNOWN)
    {
#ifdef _ND_LOG_STUN
        nd_dprintf(
          "%s: STUN[%lu]: master: %hu, app: %hu, stack[0]: "
          "%hu, stack[1]: %hu, detected_protocol: %hu\n",
          tag.c_str(), ndEF->stats.detection_packets.load(),
          ndpi_rc.master_protocol, ndpi_rc.app_protocol,
          ndEFNF->detected_protocol_stack[0],
          ndEFNF->detected_protocol_stack[1],
          ndEF->detected_protocol);
#endif
        ndProto::Id id = ProtocolLookup(ndpi_rc.app_protocol, entry);

        if (id != ndProto::Id::TODO) {
            SetDetectedProtocol(entry, id);
#ifdef _ND_LOG_STUN
            nd_dprintf(
              "%s: STUN[%lu]: refined detected protocol: "
              "%hu\n",
              tag.c_str(),
              ndEF->stats.detection_packets.load(),
              ndEF->detected_protocol);
#endif
        }
    }

    if (ndEF->detected_protocol == ndProto::Id::UNKNOWN) {
        if (ndpi_rc.master_protocol != NDPI_PROTOCOL_UNKNOWN)
        {
            SetDetectedProtocol(entry,
              ProtocolLookup(ndpi_rc.master_protocol, entry));
        }
        else if (ndpi_rc.app_protocol != NDPI_PROTOCOL_UNKNOWN)
        {
            SetDetectedProtocol(entry,
              ProtocolLookup(ndpi_rc.app_protocol, entry));
        }
    }

    if (ndEF->host_server_name.empty() &&
      ndEFNF->host_server_name[0] != '\0')
    {
        SetHostServerName(entry, ndEFNF->host_server_name);
    }

    if (ndEF->detected_protocol == ndProto::Id::TODO) {
        char proto_name[64];
        ndpi_protocol2name(ndpi, ndpi_rc, proto_name,
          sizeof(proto_name));
        nd_dprintf(
          "%s: unmapped protocol detected: ID #%hu/%hu "
          "(%s)\n",
          tag.c_str(), ndpi_rc.master_protocol,
          ndpi_rc.app_protocol, proto_name);

        DetectionComplete(entry);
        return;
    }

    if (ndEF->detected_protocol != ndProto::Id::UNKNOWN)
        DetectionUpdate(entry);

    if ((ndEF->flags.detection_init.load() &&
          ndEFNF->extra_packets_func == nullptr) ||
      ndEFNF->num_extra_packets_checked > ndEFNF->max_extra_packets_to_check ||
      ((ndEF->GetMasterProtocol() == ndProto::Id::TLS ||
         ndEF->detected_protocol == ndProto::Id::DTLS ||
         ndEF->detected_protocol == ndProto::Id::QUIC) &&
        ndEF->tls.proc_hello.load() &&
        ndEF->tls.proc_certificate.load()))
    {
        if (ndEF->detected_protocol == ndProto::Id::UNKNOWN)
            DetectionGuess(entry);

        DetectionComplete(entry);
    }
}

void ndDetectionThread::ProcessFlow(ndDetectionQueueEntry *entry) {
#ifdef _ND_ENABLE_DEBUG_STATS
    flows++;
#endif
    ndi.addr_lookup.Classify(ndEF->lower_type, ndEF->lower_addr);
    ndi.addr_lookup.Classify(ndEF->upper_type, ndEF->upper_addr);

    for (int t = 0; t < 2; t++) {
        const ndAddr *mac, *ip;
        ndAddr::Type type = ndAddr::Type::NONE;

        if (t == 0 &&
          (ndEF->lower_type == ndAddr::Type::LOCAL ||
            ndEF->lower_type == ndAddr::Type::LOCALNET ||
            ndEF->lower_type == ndAddr::Type::RESERVED))
        {
            ndi.addr_lookup.Classify(type, ndEF->lower_mac);

            mac = &ndEF->lower_mac;
            ip = &ndEF->lower_addr;
        }
        else if (
          (ndEF->upper_type == ndAddr::Type::LOCAL ||
            ndEF->upper_type == ndAddr::Type::LOCALNET ||
            ndEF->upper_type == ndAddr::Type::RESERVED))
        {
            ndi.addr_lookup.Classify(type, ndEF->upper_mac);

            mac = &ndEF->upper_mac;
            ip = &ndEF->upper_addr;
        }

        if (type != ndAddr::Type::OTHER || mac == nullptr ||
          ip == nullptr)
            continue;

        ndEF->iface->PushEndpoint(*mac, *ip);
    }

#ifdef _ND_ENABLE_CONNTRACK
    if (thread_conntrack != nullptr &&
      ndEF->iface->role == ndInterfaceRole::WAN &&
      ((ndEF->lower_type == ndAddr::Type::LOCAL &&
         ndEF->upper_type == ndAddr::Type::OTHER) ||
        (ndEF->lower_type == ndAddr::Type::OTHER &&
          ndEF->upper_type == ndAddr::Type::LOCAL)))
    {
        // Update flow with any collected information from the
        // connection tracker (CT ID, mark, NAT'd).
        thread_conntrack->UpdateFlow(ndEF);
    }
#endif

    ndEF->UpdateLowerMaps();

    if (ndEF->lower_type == ndAddr::Type::OTHER) {
        ndEF->category.network =
          ndi.categories.LookupDotDirectory(ndEF->lower_addr);
    }
    else if (ndEF->upper_type == ndAddr::Type::OTHER) {
        ndEF->category.network =
          ndi.categories.LookupDotDirectory(ndEF->upper_addr);
    }

    for (
      vector<uint8_t *>::const_iterator i =
        ndGC.privacy_filter_mac.begin();
      i != ndGC.privacy_filter_mac.end() &&
      ndEF->privacy_mask !=
        (ndFlow::PrivacyMask::LOWER_MAC | ndFlow::PrivacyMask::UPPER_MAC);
      i++)
    {
#if defined(__linux__)
        if (! memcmp((*i), ndEF->lower_mac.addr.ll.sll_addr, ETH_ALEN))
            ndEF->privacy_mask |= ndFlow::PrivacyMask::LOWER_MAC;
        if (! memcmp((*i), ndEF->upper_mac.addr.ll.sll_addr, ETH_ALEN))
            ndEF->privacy_mask |= ndFlow::PrivacyMask::UPPER_MAC;
#elif defined(__FreeBSD__)
        if (! memcmp((*i), LLADDR(&ndEF->lower_mac.addr.dl), ETH_ALEN))
            ndEF->privacy_mask |= ndFlow::PrivacyMask::LOWER_MAC;
        if (! memcmp((*i), LLADDR(&ndEF->upper_mac.addr.dl), ETH_ALEN))
            ndEF->privacy_mask |= ndFlow::PrivacyMask::UPPER_MAC;
#endif
    }

    for (
      vector<struct sockaddr *>::const_iterator i =
        ndGC.privacy_filter_host.begin();
      i != ndGC.privacy_filter_host.end() &&
      ndEF->privacy_mask !=
        (ndFlow::PrivacyMask::LOWER_IP | ndFlow::PrivacyMask::UPPER_IP);
      i++)
    {
        struct sockaddr_in *sa_in;
        struct sockaddr_in6 *sa_in6;

        switch ((*i)->sa_family) {
        case AF_INET:
            sa_in = reinterpret_cast<struct sockaddr_in *>((*i));
            if (! memcmp(&ndEF->lower_addr.addr.in.sin_addr,
                  &sa_in->sin_addr,
                  sizeof(struct in_addr)))
                ndEF->privacy_mask |= ndFlow::PrivacyMask::LOWER_IP;
            if (! memcmp(&ndEF->upper_addr.addr.in.sin_addr,
                  &sa_in->sin_addr,
                  sizeof(struct in_addr)))
                ndEF->privacy_mask |= ndFlow::PrivacyMask::UPPER_IP;
            break;
        case AF_INET6:
            sa_in6 = reinterpret_cast<struct sockaddr_in6 *>((*i));
            if (! memcmp(&ndEF->lower_addr.addr.in6.sin6_addr,
                  &sa_in6->sin6_addr,
                  sizeof(struct in6_addr)))
                ndEF->privacy_mask |= ndFlow::PrivacyMask::LOWER_IP;
            if (! memcmp(&ndEF->upper_addr.addr.in6.sin6_addr,
                  &sa_in6->sin6_addr,
                  sizeof(struct in6_addr)))
                ndEF->privacy_mask |= ndFlow::PrivacyMask::UPPER_IP;
            break;
        }

        // TODO: Update the text IP addresses that were set
        // above...
    }

    if (dhc != nullptr) {
        string hostname;

        if (ndEF->lower_type == ndAddr::Type::OTHER)
            dhc->Lookup(ndEF->lower_addr, hostname);

        if (hostname.empty() && ndEF->upper_type == ndAddr::Type::OTHER)
            dhc->Lookup(ndEF->upper_addr, hostname);

        if (! hostname.empty())
            ndEF->dns_host_name = hostname;
    }
}

bool ndDetectionThread::ProcessALPN(
  ndDetectionQueueEntry *entry, bool client) {
    bool updated = false;
    const char *detected_alpn = (client) ?
      ndEFNFP.tls_quic.advertised_alpns :
      ndEFNFP.tls_quic.negotiated_alpn;

    if (client && ndEF->tls.alpn.empty()) {
        stringstream ss(detected_alpn);

        while (ss.good()) {
            string alpn;
            getline(ss, alpn, ',');

            ndEF->tls.alpn.push_back(alpn);
        }

        updated = (! ndEF->tls.alpn.empty());
    }
    else if (ndEF->tls.alpn_server.empty()) {
        ndEF->tls.alpn_server.push_back(detected_alpn);

        auto alpn = nd_alpn_protos.find(detected_alpn);
        if (alpn != nd_alpn_protos.end() &&
          alpn->second != ndEF->detected_protocol)
        {
            if ((ndGC_DEBUG && ndGC_VERBOSE)) {
                nd_dprintf(
                  "%s: TLS ALPN: refined: %s: %s -> "
                  "%s\n",
                  tag.c_str(), detected_alpn,
                  ndEF->detected_protocol_name.c_str(),
                  ndProto::GetName(alpn->second));
            }

            SetDetectedProtocol(entry, alpn->second);

            updated = true;
        }
    }

    return updated;
}

void ndDetectionThread::ProcessRisks(ndDetectionQueueEntry *entry) {
    if (ndEFNF->risk != NDPI_NO_RISK) {
        for (unsigned i = 0; i < NDPI_MAX_RISK; i++) {
            if (NDPI_ISSET_BIT(ndEFNF->risk, i) != 0) {
                ndEF->risk.risks.insert(ndRisk::nDPI::Find(i));
            }
        }

        ndEF->risk.ndpi_score = ndpi_risk2score(ndEFNF->risk,
          &ndEF->risk.ndpi_score_client,
          &ndEF->risk.ndpi_score_server);
    }
}

void ndDetectionThread::SetHostServerName(
  ndDetectionQueueEntry *entry, const char *host_server_name) {
    if (host_server_name[0] != '\0') {
        ndEF->host_server_name.assign(host_server_name);
        nd_set_hostname(ndEF->host_server_name);

        SetDetectedApplication(entry,
          ndi.apps.Find(ndEF->host_server_name));

        ndEF->category.domain = ndi.categories.LookupDotDirectory(
          ndEFNF->host_server_name);
    }
}

void ndDetectionThread::SetDetectedProtocol(
  ndDetectionQueueEntry *entry, ndProto::Id id) {
    if (id == ndProto::Id::UNKNOWN) return;

    ndEF->detected_protocol = id;
    ndEF->detected_protocol_name = ndProto::GetName(id);

    ndEF->category.protocol = ndi.categories.Lookup(
      ndCategories::Type::PROTO, (unsigned)id);
}

void ndDetectionThread::SetDetectedApplication(
  ndDetectionQueueEntry *entry, nd_app_id_t id) {
    if (id == ND_APP_UNKNOWN) return;

    ndEF->detected_application = id;
    ndi.apps.Lookup(id, ndEF->detected_application_name);

    ndEF->category.application = ndi.categories.Lookup(
      ndCategories::Type::APP, id);
}

void ndDetectionThread::DispatchEvent(ndDetectionQueueEntry *entry) {
    ndPluginProcessor::Event event = ndPluginProcessor::Event::DPI_NEW;

    if (ndEF->flags.detection_complete.load())
        event = ndPluginProcessor::Event::DPI_COMPLETE;
    else if (ndEF->flags.detection_updated.load())
        event = ndPluginProcessor::Event::DPI_UPDATE;

    ndi.plugins.BroadcastProcessorEvent(event, ndEF);

    if (ndGC_DEBUG || ndGC.h_flow != stderr) {
        bool flow_print = false;
        ndFlags<ndFlow::PrintFlags> flags = ndFlow::PrintFlags::METADATA;

        if (ndGC.verbosity > 1)  // -vv
            flags |= ndFlow::PrintFlags::RISKS;
        if (ndGC.verbosity > 2)  // -vvv
            flags |= ndFlow::PrintFlags::STATS;
        if (ndGC.verbosity > 3)  // -vvvv
            flags |= ndFlow::PrintFlags::STATS_FULL;
        if (ndGC.verbosity > 4)  // -vvvvv
            flags |= ndFlow::PrintFlags::MACS;
        if (ndGC.verbosity > 5)  // -vvvvvv
            flags |= ndFlow::PrintFlags::HASHES;
        if (ndGC.verbosity > 6)
            flags = ndFlow::PrintFlags::ALL;

        if (ndGC.debug_flow_print_exprs.size()) {
            for (auto &it : ndGC.debug_flow_print_exprs) {
                try {
                    if (! parser.Parse(ndEF, it)) continue;
                    flow_print = true;
                    break;
                }
                catch (string &e) {
                    nd_dprintf("%s: %s: %s\n", tag.c_str(),
                      it.c_str(), e.c_str());
                }
            }
        }
        else if (ndGC_VERBOSE || ndGC.h_flow != stderr)
            flow_print = true;

        switch (event) {
        case ndPluginProcessor::Event::DPI_NEW:
            if (! ndFlagBoolean(ndGC.verbosity_flags,
                  ndVerbosityFlags::EVENT_DPI_NEW))
                flow_print = false;
            break;
        case ndPluginProcessor::Event::DPI_UPDATE:
            if (! ndFlagBoolean(ndGC.verbosity_flags,
                  ndVerbosityFlags::EVENT_DPI_UPDATE))
                flow_print = false;
            break;
        case ndPluginProcessor::Event::DPI_COMPLETE:
            if (! ndFlagBoolean(ndGC.verbosity_flags,
                  ndVerbosityFlags::EVENT_DPI_COMPLETE))
                flow_print = false;
            break;
        default: break;
        }

        if (flow_print) ndEF->Print(flags);
    }
}

void ndDetectionThread::DetectionUpdate(ndDetectionQueueEntry *entry) {

    if (ndEF->flags.detection_init.load() == false) {
        // Determine application based on master protocol metadata
        // for Protocol / Application "Twins"
        nd_app_id_t app_twin = ND_APP_UNKNOWN;

        switch (ndEF->detected_protocol) {
        case ndProto::Id::APPLE_PUSH:
            app_twin = ndi.apps.Lookup("netify.apple-push");
            break;

        case ndProto::Id::AVAST:
            app_twin = ndi.apps.Lookup("netify.avast");
            break;

        case ndProto::Id::FACEBOOK_VOIP:
            // TODO: netify.meta-messaging or netify.facebook-messager?
            app_twin = ndi.apps.Lookup(
              "netify.meta-messaging");
            break;

        case ndProto::Id::LINE_CALL:
            app_twin = ndi.apps.Lookup("netify.line");
            break;

        case ndProto::Id::NEST_LOG_SINK:
            app_twin = ndi.apps.Lookup("netify.nest");
            break;

        case ndProto::Id::SPOTIFY:
            app_twin = ndi.apps.Lookup("netify.spotify");
            break;

        case ndProto::Id::SIGNAL_CALL:
            app_twin = ndi.apps.Lookup("netify.signal");
            break;

        case ndProto::Id::SKYPE_TEAMS_CALL:
            // TODO: netify.skype or netify.teams?
            app_twin = ndi.apps.Lookup("netify.teams");
            break;

        case ndProto::Id::STEAM:
            app_twin = ndi.apps.Lookup("netify.steam");
            break;

        case ndProto::Id::SYNCTHING:
            app_twin = ndi.apps.Lookup("netify.syncthing");
            break;

        case ndProto::Id::TEAMVIEWER:
            app_twin = ndi.apps.Lookup("netify.teamviewer");
            break;

        case ndProto::Id::TELEGRAM_VOIP:
            app_twin = ndi.apps.Lookup("netify.telegram");
            break;

        case ndProto::Id::TIVOCONNECT:
            app_twin = ndi.apps.Lookup("netify.tivo");
            break;

        case ndProto::Id::TPLINK_SHP:
            app_twin = ndi.apps.Lookup("netify.tp-link");
            break;

        case ndProto::Id::TUYA_LP:
            app_twin = ndi.apps.Lookup("netify.tuya-smart");
            break;

        case ndProto::Id::UBNTAC2:
            app_twin = ndi.apps.Lookup("netify.ubiquiti");
            break;

        case ndProto::Id::WHATSAPP_CALL:
            app_twin = ndi.apps.Lookup("netify.whatsapp");
            break;

        case ndProto::Id::ZOOM:
            app_twin = ndi.apps.Lookup("netify.zoom");
            break;

        default: break;
        }

        if (app_twin != ND_APP_UNKNOWN)
            SetDetectedApplication(entry, app_twin);
    }

    if (ndEFNF != nullptr) {
        bool updated = false;

        switch (ndEF->GetMasterProtocol()) {
        case ndProto::Id::TLS:
        case ndProto::Id::DTLS:
        case ndProto::Id::QUIC:
            if (ndEF->tls.version == 0 &&
              ndEFNFP.tls_quic.ssl_version != 0)
            {
                updated = true;
                ndEF->tls.version = ndEFNFP.tls_quic.ssl_version;
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf("%s: TLS: set version.\n", tag.c_str());
#endif
            }

            if (ndEF->tls.cipher_suite == 0 &&
              ndEFNFP.tls_quic.server_cipher != 0)
            {
                updated = true;
                ndEF->tls.cipher_suite = ndEFNFP.tls_quic.server_cipher;
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf("%s: TLS: set cipher_suite.\n",
                  tag.c_str());
#endif
            }

            if (ndEF->tls.server_ja3.empty() &&
              ndEFNFP.tls_quic.ja3_server[0] != '\0')
            {
                updated = true;
                ndEF->tls.server_ja3.assign(
                  ndEFNFP.tls_quic.ja3_server);
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf("%s: TLS: set ja3_server.\n",
                  tag.c_str());
#endif
            }

            if (ndEF->tls.server_cn.empty() &&
              ndEFNFP.tls_quic.serverCN != nullptr)
            {
                updated = true;
                nd_set_hostname(ndEF->tls.server_cn,
                  ndEFNFP.tls_quic.serverCN,
                  ND_FLOW_TLS_CNLEN);
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf("%s: TLS: set serverCN: %s\n",
                  tag.c_str(), ndEF->tls.server_cn.c_str());
#endif
                if (ndEF->detected_application == ND_APP_UNKNOWN)
                {
                    SetDetectedApplication(entry,
                      ndi.apps.Find(ndEF->tls.server_cn));
                }
            }

            if (ndEF->tls.issuer_dn.empty() &&
              ndEFNFP.tls_quic.issuerDN != nullptr)
            {
                updated = true;
                ndEF->tls.issuer_dn.assign(ndEFNFP.tls_quic.issuerDN);
                nd_trim(ndEF->tls.issuer_dn);
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf("%s: TLS: set issuerDN.\n", tag.c_str());
#endif
            }

            if (ndEF->tls.subject_dn.empty() &&
              ndEFNFP.tls_quic.subjectDN != nullptr)
            {
                updated = true;
                ndEF->tls.subject_dn.assign(ndEFNFP.tls_quic.subjectDN);
                nd_trim(ndEF->tls.issuer_dn);
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf("%s: TLS: set subjectDN.\n",
                  tag.c_str());
#endif
            }

            if (ndEF->tls.cert_fingerprint.empty() &&
              ndEFNFP.tls_quic.fingerprint_set)
            {
                updated = true;
                ndEF->tls.cert_fingerprint.reserve(SHA1_DIGEST_LENGTH);
                ndEF->tls.cert_fingerprint.resize(SHA1_DIGEST_LENGTH);
                memcpy(&ndEF->tls.cert_fingerprint[0],
                  ndEFNFP.tls_quic.sha1_certificate_fingerprint,
                  SHA1_DIGEST_LENGTH);
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf(
                  "%s: TLS: set cert_fingerprint.\n", tag.c_str());
#endif
            }

            if (ndEF->tls.alpn.empty() && ndEFNFP.tls_quic.advertised_alpns)
            {
                updated = ProcessALPN(entry, true);
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf("%s: TLS: set ALPNs.\n", tag.c_str());
#endif
            }

            if (ndEF->tls.alpn_server.empty() &&
              ndEFNFP.tls_quic.negotiated_alpn)
            {
                updated = ProcessALPN(entry, false);
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf(
                  "%s: TLS: set negotiated_alpn.\n", tag.c_str());
#endif
            }

            if (ndEF->tls.ech.version != 0 &&
              ndEFNFP.tls_quic.encrypted_ch.version != 0)
            {
                updated = true;
                ndEF->tls.ech.version =
                  ndEFNFP.tls_quic.encrypted_ch.version;
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf("%s: TLS: set ECH.\n", tag.c_str());
#endif
            }

            if (ndEF->tls.esni.esni.empty() &&
              ndEFNFP.tls_quic.encrypted_sni.esni != nullptr)
            {
                updated = true;
                ndEF->tls.esni.cipher_suite =
                  ndEFNFP.tls_quic.encrypted_sni.cipher_suite;
                ndEF->tls.esni.esni.assign(
                  ndEFNFP.tls_quic.encrypted_sni.esni);
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf("%s: TLS: set ESNI.\n", tag.c_str());
#endif
            }

            if (ndEFNFP.tls_quic.hello_processed &&
              ! ndEF->tls.proc_hello.load())
            {
                ndEF->tls.proc_hello = true;
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf("%s: TLS: hello processed.\n",
                  tag.c_str());
#endif
            }

            if (ndEFNF->tls_quic.certificate_processed &&
              ! ndEF->tls.proc_certificate.load())
            {
                ndEF->tls.proc_certificate = true;
#ifdef _ND_LOG_FLOW_DEBUG
                nd_dprintf(
                  "%s: TLS: certificate processed.\n", tag.c_str());
#endif
            }

            break;
        case ndProto::Id::HTTP:
        case ndProto::Id::SSDP:
            if (ndEF->http.user_agent.empty() &&
              ndEFNF->http.user_agent != nullptr)
            {
                updated = true;
                ndEF->http.user_agent.assign(ndEFNF->http.user_agent);
                nd_trim(ndEF->http.user_agent);
            }

            if (ndEF->http.url.empty() && ndEFNF->http.url != nullptr)
            {
                updated = true;
                ndEF->http.url.assign(ndEFNF->http.url);
                nd_trim(ndEF->http.url);
            }
            break;
        case ndProto::Id::DHCP:
            if (ndEF->dhcp.fingerprint.empty() &&
              ndEFNFP.dhcp.fingerprint[0] != '\0')
            {
                updated = true;
                ndEF->dhcp.fingerprint.assign(ndEFNFP.dhcp.fingerprint);
            }
            if (ndEF->dhcp.class_ident.empty() &&
              ndEFNFP.dhcp.class_ident[0] != '\0')
            {
                updated = true;
                ndEF->dhcp.class_ident.assign(ndEFNFP.dhcp.class_ident);
            }
            break;
        case ndProto::Id::SSH:
            if (ndEF->ssh.client_agent.empty() &&
              ndEFNFP.ssh.client_signature[0] != '\0')
            {
                updated = true;
                ndEF->ssh.client_agent.assign(
                  ndEFNFP.ssh.client_signature);
                nd_trim(ndEF->ssh.client_agent);
            }
            if (ndEF->ssh.server_agent.empty() &&
              ndEFNFP.ssh.server_signature[0] != '\0')
            {
                updated = true;
                ndEF->ssh.server_agent.assign(
                  ndEFNFP.ssh.server_signature);
                nd_trim(ndEF->ssh.server_agent);
            }
            break;
        case ndProto::Id::BITTORRENT:
            if (ndEF->bt.info_hash.empty() &&
              ndEFNFP.bittorrent.hash[0] != '\0')
            {
                updated = true;
                ndEF->bt.info_hash.reserve(SHA1_DIGEST_LENGTH);
                ndEF->bt.info_hash.resize(SHA1_DIGEST_LENGTH);
                memcpy(&ndEF->bt.info_hash[0],
                  ndEFNFP.bittorrent.hash, SHA1_DIGEST_LENGTH);
            }
            break;
        default: break;
        }

        if (ndEF->flags.detection_init.load()) {
            if (updated) {
                ndEF->flags.detection_updated = true;
                ndEF->Hash(tag, true);

                DispatchEvent(entry);
            }

            return;
        }
    }

    ndEF->flags.detection_init = true;
    ndEF->Hash(tag, true);

    DispatchEvent(entry);
}

void ndDetectionThread::DetectionGuess(ndDetectionQueueEntry *entry) {
    uint8_t guessed = 0;
    ndpi_protocol ndpi_rc = ndpi_detection_giveup(ndpi,
      ndEFNF, 1, &guessed);

    if (guessed) {
        ndProto::Id id = ProtocolLookup(
          ndpi_rc.master_protocol, entry);

        if (id == ndProto::Id::UNKNOWN) {
            id = ProtocolLookup(ndpi_rc.app_protocol, entry);
            if (id != ndProto::Id::UNKNOWN) {
                SetDetectedProtocol(entry, id);
            }
        }
    }

    ndEF->flags.detection_guessed = true;

    DetectionUpdate(entry);
}

void ndDetectionThread::DetectionComplete(
  ndDetectionQueueEntry *entry) {

    if (ndEFNF != nullptr) ProcessRisks(entry);

    // Determine application by DHC (dns_host_name) if still
    // unknown.
    if (ndEF->detected_application == ND_APP_UNKNOWN) {
        if (! ndEF->dns_host_name.empty()) {
            if (! ndGC_DHC_PARTIAL_LOOKUPS ||
              ndEF->host_server_name.empty())
            {
                SetDetectedApplication(entry,
                  ndi.apps.Find(ndEF->dns_host_name));

                if (ndEF->detected_application == ND_APP_UNKNOWN)
                {
                    ndEF->flags.dhc_hit = (ndEF->detected_application !=
                      ND_APP_UNKNOWN);
                }
            }
        }
    }

    // Determine application by network CIDR if still unknown.
    // DNS flows excluded...
    if (ndEF->GetMasterProtocol() != ndProto::Id::DNS &&
      ndEF->detected_application == ND_APP_UNKNOWN)
    {
        if (ndEF->lower_type == ndAddr::Type::OTHER) {
            SetDetectedApplication(entry,
              ndi.apps.Find(ndEF->lower_addr));

            if (ndEF->detected_application == ND_APP_UNKNOWN)
                SetDetectedApplication(entry,
                  ndi.apps.Find(ndEF->upper_addr));
        }
        else {
            SetDetectedApplication(entry,
              ndi.apps.Find(ndEF->upper_addr));

            if (ndEF->detected_application == ND_APP_UNKNOWN)
                SetDetectedApplication(entry,
                  ndi.apps.Find(ndEF->lower_addr));
        }
    }

    if (ndGC_SOFT_DISSECTORS) {
        ndSoftDissector nsd;

        if (ndi.apps.SoftDissectorMatch(ndEF, &parser, nsd)) {
            ndEF->flags.soft_dissector = true;

            if (nsd.aid > -1) {
                if (nsd.aid == ND_APP_UNKNOWN) {
                    ndEF->detected_application = ND_APP_UNKNOWN;
                    ndEF->detected_application_name.clear();
                    ndEF->category.application = ND_CAT_UNKNOWN;
                }
                else {
                    SetDetectedApplication(entry,
                      (nd_app_id_t)nsd.aid);
                }
            }

            if (nsd.pid > -1)
                SetDetectedProtocol(entry, (ndProto::Id)nsd.pid);
        }
    }

    ndEF->Hash(tag, true);

    if (fhc != nullptr && ! ndEF->flags.fhc_hit.load() &&
      ! ndEF->flags.detection_guessed.load() &&
      (ndEF->detected_protocol != ndProto::Id::UNKNOWN ||
        ndEF->detected_application != ND_APP_UNKNOWN) &&
      ndEF->ip_protocol != IPPROTO_ICMP &&
      ndEF->ip_protocol != IPPROTO_ICMPV6 &&
      ndEF->ip_protocol != IPPROTO_IGMP &&
      ndEF->GetMasterProtocol() != ndProto::Id::DNS &&
      ndEF->detected_protocol != ndProto::Id::DHCP &&
      ndEF->detected_protocol != ndProto::Id::DHCPV6)
    {
        fhc->Insert(ndEF);
    }

    ndEF->flags.detection_complete = true;

    if (ndEFNF != nullptr) DetectionUpdate(entry);

    DispatchEvent(entry);
}

void throwError(std::string error) {
    fprintf(stderr, error.c_str());
    exit(EXIT_FAILURE);
}

void loadBpfProgram() {
unsigned char filter_bpf_o[] = {
  0x7f, 0x45, 0x4c, 0x46, 0x02, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0xf7, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00,
  0x1d, 0x00, 0x01, 0x00, 0x61, 0x12, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x63, 0x1a, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00,
  0xb7, 0x06, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xbf, 0x81, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00,
  0x2d, 0x21, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x71, 0x83, 0x17, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x15, 0x03, 0x44, 0x00, 0x11, 0x00, 0x00, 0x00,
  0x55, 0x03, 0x91, 0x00, 0x06, 0x00, 0x00, 0x00, 0x07, 0x01, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x2d, 0x21, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x81, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x82, 0x1e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xaf, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x69, 0x81, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0xaf, 0x12, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x69, 0x81, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xaf, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x63, 0x2a, 0xfc, 0xff,
  0x00, 0x00, 0x00, 0x00, 0xbf, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x02, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0x18, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0x00, 0x81, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00,
  0x61, 0x81, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x12, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x77, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x7b, 0x2a, 0xc8, 0xff, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x12, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
  0x7b, 0x2a, 0xb0, 0xff, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x12, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x77, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x57, 0x02, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x7b, 0x2a, 0xc0, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x77, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x57, 0x01, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x7b, 0x1a, 0xb8, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x61, 0x81, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7b, 0x1a, 0xd0, 0xff, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xa3, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x03, 0x00, 0x00, 0xb0, 0xff, 0xff, 0xff,
  0x18, 0x01, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0xb7, 0x04, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00,
  0xb1, 0x00, 0x00, 0x00, 0x61, 0x81, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xbf, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x02, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x7b, 0x2a, 0xc8, 0xff, 0x00, 0x00, 0x00, 0x00,
  0xbf, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00,
  0xff, 0x00, 0x00, 0x00, 0x7b, 0x2a, 0xb0, 0xff, 0x00, 0x00, 0x00, 0x00,
  0xbf, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x02, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
  0x7b, 0x2a, 0xc0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x77, 0x01, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x57, 0x01, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
  0x7b, 0x1a, 0xb8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x61, 0x81, 0x1e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7b, 0x1a, 0xd0, 0xff, 0x00, 0x00, 0x00, 0x00,
  0xbf, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x03, 0x00, 0x00,
  0xb0, 0xff, 0xff, 0xff, 0x18, 0x01, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0xb7, 0x04, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x85, 0x00, 0x00, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x05, 0x00, 0x27, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xbf, 0x13, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x03, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2d, 0x23, 0x4b, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x69, 0x82, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x15, 0x02, 0x02, 0x00, 0x01, 0xbb, 0x00, 0x00, 0x69, 0x11, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x55, 0x01, 0x0f, 0x00, 0x01, 0xbb, 0x00, 0x00,
  0xbf, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00,
  0x1e, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0xbf, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x07, 0x07, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x55, 0x00, 0x1a, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x72, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x55, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x82, 0x24, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x69, 0x81, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x83, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x84, 0x1e, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xaf, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xaf, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x21, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xaf, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x63, 0x4a, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xa2, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff,
  0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x15, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00,
  0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb7, 0x02, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0xb7, 0x06, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x25, 0x00, 0x00, 0x00, 0x00, 0x00, 0x61, 0x71, 0x04, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xbf, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x77, 0x02, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x7b, 0x2a, 0xc8, 0xff,
  0x00, 0x00, 0x00, 0x00, 0xbf, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x57, 0x02, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x7b, 0x2a, 0xb0, 0xff,
  0x00, 0x00, 0x00, 0x00, 0xbf, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x77, 0x02, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00,
  0xff, 0x00, 0x00, 0x00, 0x7b, 0x2a, 0xc0, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x77, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x57, 0x01, 0x00, 0x00,
  0xff, 0x00, 0x00, 0x00, 0x7b, 0x1a, 0xb8, 0xff, 0x00, 0x00, 0x00, 0x00,
  0xb7, 0x06, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x7b, 0x6a, 0xd0, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x61, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x57, 0x01, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x7b, 0x1a, 0xd8, 0xff,
  0x00, 0x00, 0x00, 0x00, 0x61, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x77, 0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x57, 0x01, 0x00, 0x00,
  0xff, 0x00, 0x00, 0x00, 0x7b, 0x1a, 0xe0, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x61, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x01, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x57, 0x01, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00,
  0x7b, 0x1a, 0xe8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x61, 0x71, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x77, 0x01, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x7b, 0x1a, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00, 0xbf, 0xa3, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x07, 0x03, 0x00, 0x00, 0xb0, 0xff, 0xff, 0xff,
  0x18, 0x01, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
  0xb7, 0x04, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00,
  0xb1, 0x00, 0x00, 0x00, 0xbf, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x72, 0x6f, 0x70,
  0x70, 0x69, 0x6e, 0x67, 0x20, 0x54, 0x43, 0x50, 0x20, 0x70, 0x61, 0x63,
  0x6b, 0x65, 0x74, 0x00, 0x73, 0x72, 0x63, 0x3a, 0x20, 0x25, 0x64, 0x2e,
  0x25, 0x64, 0x2e, 0x25, 0x64, 0x2e, 0x25, 0x64, 0x2c, 0x20, 0x30, 0x78,
  0x25, 0x78, 0x00, 0x64, 0x73, 0x74, 0x3a, 0x20, 0x25, 0x64, 0x2e, 0x25,
  0x64, 0x2e, 0x25, 0x64, 0x2e, 0x25, 0x64, 0x2c, 0x20, 0x30, 0x78, 0x25,
  0x78, 0x00, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20,
  0x51, 0x55, 0x49, 0x43, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x53, 0x52, 0x43,
  0x20, 0x49, 0x50, 0x20, 0x25, 0x64, 0x2e, 0x25, 0x64, 0x2e, 0x25, 0x64,
  0x2e, 0x25, 0x64, 0x2c, 0x20, 0x79, 0x74, 0x5f, 0x69, 0x70, 0x3a, 0x20,
  0x25, 0x64, 0x0a, 0x44, 0x53, 0x54, 0x20, 0x49, 0x50, 0x3a, 0x25, 0x64,
  0x2e, 0x25, 0x64, 0x2e, 0x25, 0x64, 0x2e, 0x25, 0x64, 0x00, 0x44, 0x72,
  0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x55, 0x44, 0x50, 0x20, 0x70,
  0x61, 0x63, 0x6b, 0x65, 0x74, 0x00, 0x44, 0x75, 0x61, 0x6c, 0x20, 0x42,
  0x53, 0x44, 0x2f, 0x47, 0x50, 0x4c, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x08, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x2e,
  0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x7a,
  0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x90,
  0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x04,
  0x00, 0x18, 0x01, 0x51, 0x00, 0x04, 0x08, 0x78, 0x01, 0x52, 0x04, 0xf0,
  0x04, 0x90, 0x05, 0x01, 0x52, 0x00, 0x04, 0x10, 0xf0, 0x09, 0x01, 0x58,
  0x00, 0x04, 0x18, 0xa0, 0x01, 0x02, 0x30, 0x9f, 0x04, 0xa0, 0x01, 0xa8,
  0x01, 0x01, 0x52, 0x04, 0xa8, 0x01, 0xf0, 0x04, 0x03, 0x7a, 0xcc, 0x00,
  0x04, 0xf0, 0x04, 0xd0, 0x06, 0x02, 0x30, 0x9f, 0x04, 0xd0, 0x06, 0xd8,
  0x06, 0x01, 0x54, 0x04, 0xd8, 0x06, 0xb8, 0x07, 0x03, 0x7a, 0xcc, 0x00,
  0x04, 0xb8, 0x07, 0xe0, 0x09, 0x02, 0x30, 0x9f, 0x00, 0x04, 0x28, 0xf0,
  0x09, 0x03, 0x78, 0x0e, 0x9f, 0x00, 0x04, 0x28, 0xf0, 0x09, 0x01, 0x58,
  0x00, 0x04, 0x58, 0x60, 0x01, 0x51, 0x00, 0x04, 0xd0, 0x01, 0xf8, 0x01,
  0x01, 0x50, 0x00, 0x04, 0xf0, 0x04, 0xa0, 0x05, 0x01, 0x51, 0x00, 0x04,
  0x80, 0x07, 0xa8, 0x07, 0x01, 0x50, 0x00, 0x01, 0x11, 0x01, 0x25, 0x25,
  0x13, 0x05, 0x03, 0x25, 0x72, 0x17, 0x10, 0x17, 0x1b, 0x25, 0x11, 0x1b,
  0x12, 0x06, 0x73, 0x17, 0x74, 0x17, 0x8c, 0x01, 0x17, 0x00, 0x00, 0x02,
  0x2e, 0x01, 0x11, 0x1b, 0x12, 0x06, 0x40, 0x18, 0x7a, 0x19, 0x03, 0x25,
  0x3a, 0x0b, 0x3b, 0x0b, 0x27, 0x19, 0x49, 0x13, 0x3f, 0x19, 0x00, 0x00,
  0x03, 0x34, 0x00, 0x03, 0x25, 0x49, 0x13, 0x3a, 0x0b, 0x3b, 0x0b, 0x02,
  0x18, 0x00, 0x00, 0x04, 0x05, 0x00, 0x02, 0x22, 0x03, 0x25, 0x3a, 0x0b,
  0x3b, 0x0b, 0x49, 0x13, 0x00, 0x00, 0x05, 0x34, 0x00, 0x02, 0x22, 0x03,
  0x25, 0x3a, 0x0b, 0x3b, 0x0b, 0x49, 0x13, 0x00, 0x00, 0x06, 0x0b, 0x01,
  0x11, 0x1b, 0x12, 0x06, 0x00, 0x00, 0x07, 0x0b, 0x01, 0x55, 0x23, 0x00,
  0x00, 0x08, 0x34, 0x00, 0x02, 0x18, 0x03, 0x25, 0x3a, 0x0b, 0x3b, 0x0b,
  0x49, 0x13, 0x00, 0x00, 0x09, 0x34, 0x00, 0x03, 0x25, 0x3a, 0x0b, 0x3b,
  0x0b, 0x49, 0x13, 0x00, 0x00, 0x0a, 0x01, 0x01, 0x49, 0x13, 0x00, 0x00,
  0x0b, 0x21, 0x00, 0x49, 0x13, 0x37, 0x0b, 0x00, 0x00, 0x0c, 0x26, 0x00,
  0x49, 0x13, 0x00, 0x00, 0x0d, 0x24, 0x00, 0x03, 0x25, 0x3e, 0x0b, 0x0b,
  0x0b, 0x00, 0x00, 0x0e, 0x24, 0x00, 0x03, 0x25, 0x0b, 0x0b, 0x3e, 0x0b,
  0x00, 0x00, 0x0f, 0x34, 0x00, 0x03, 0x25, 0x49, 0x13, 0x3f, 0x19, 0x3a,
  0x0b, 0x3b, 0x0b, 0x02, 0x18, 0x00, 0x00, 0x10, 0x13, 0x01, 0x0b, 0x0b,
  0x3a, 0x0b, 0x3b, 0x0b, 0x00, 0x00, 0x11, 0x0d, 0x00, 0x03, 0x25, 0x49,
  0x13, 0x3a, 0x0b, 0x3b, 0x0b, 0x38, 0x0b, 0x00, 0x00, 0x12, 0x0f, 0x00,
  0x49, 0x13, 0x00, 0x00, 0x13, 0x21, 0x00, 0x49, 0x13, 0x37, 0x05, 0x00,
  0x00, 0x14, 0x16, 0x00, 0x49, 0x13, 0x03, 0x25, 0x3a, 0x0b, 0x3b, 0x0b,
  0x00, 0x00, 0x15, 0x34, 0x00, 0x03, 0x25, 0x49, 0x13, 0x3a, 0x0b, 0x3b,
  0x0b, 0x00, 0x00, 0x16, 0x15, 0x01, 0x49, 0x13, 0x27, 0x19, 0x00, 0x00,
  0x17, 0x05, 0x00, 0x49, 0x13, 0x00, 0x00, 0x18, 0x0f, 0x00, 0x00, 0x00,
  0x19, 0x26, 0x00, 0x00, 0x00, 0x1a, 0x18, 0x00, 0x00, 0x00, 0x1b, 0x34,
  0x00, 0x03, 0x25, 0x49, 0x13, 0x3a, 0x0b, 0x3b, 0x05, 0x00, 0x00, 0x1c,
  0x04, 0x01, 0x49, 0x13, 0x03, 0x25, 0x0b, 0x0b, 0x3a, 0x0b, 0x3b, 0x05,
  0x00, 0x00, 0x1d, 0x28, 0x00, 0x03, 0x25, 0x1c, 0x0f, 0x00, 0x00, 0x1e,
  0x04, 0x01, 0x49, 0x13, 0x0b, 0x0b, 0x3a, 0x0b, 0x3b, 0x0b, 0x00, 0x00,
  0x1f, 0x13, 0x01, 0x03, 0x25, 0x0b, 0x0b, 0x3a, 0x0b, 0x3b, 0x0b, 0x00,
  0x00, 0x20, 0x0d, 0x00, 0x03, 0x25, 0x49, 0x13, 0x3a, 0x0b, 0x3b, 0x0b,
  0x0b, 0x0b, 0x0d, 0x0b, 0x0c, 0x0b, 0x38, 0x0b, 0x00, 0x00, 0x21, 0x0d,
  0x00, 0x49, 0x13, 0x3a, 0x0b, 0x3b, 0x0b, 0x38, 0x0b, 0x00, 0x00, 0x22,
  0x17, 0x01, 0x0b, 0x0b, 0x3a, 0x0b, 0x3b, 0x0b, 0x00, 0x00, 0x23, 0x13,
  0x01, 0x03, 0x25, 0x0b, 0x0b, 0x3a, 0x0b, 0x3b, 0x05, 0x00, 0x00, 0x24,
  0x0d, 0x00, 0x03, 0x25, 0x49, 0x13, 0x3a, 0x0b, 0x3b, 0x05, 0x38, 0x0b,
  0x00, 0x00, 0x00, 0x94, 0x05, 0x00, 0x00, 0x05, 0x00, 0x01, 0x08, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x00, 0x0c, 0x00, 0x01, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x09, 0xf0, 0x04, 0x00, 0x00, 0x08, 0x00,
  0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x02, 0x09,
  0xf0, 0x04, 0x00, 0x00, 0x01, 0x5a, 0x60, 0x00, 0x1f, 0xa0, 0x01, 0x00,
  0x00, 0x03, 0x03, 0x13, 0x01, 0x00, 0x00, 0x00, 0x34, 0x02, 0xa1, 0x00,
  0x03, 0x06, 0x2c, 0x01, 0x00, 0x00, 0x00, 0x35, 0x02, 0xa1, 0x01, 0x03,
  0x06, 0x2c, 0x01, 0x00, 0x00, 0x00, 0x36, 0x02, 0xa1, 0x02, 0x03, 0x06,
  0x38, 0x01, 0x00, 0x00, 0x00, 0x42, 0x02, 0xa1, 0x03, 0x03, 0x03, 0x13,
  0x01, 0x00, 0x00, 0x00, 0x56, 0x02, 0xa1, 0x04, 0x04, 0x00, 0x63, 0x00,
  0x1f, 0x18, 0x05, 0x00, 0x00, 0x05, 0x01, 0x65, 0x00, 0x20, 0x6a, 0x02,
  0x00, 0x00, 0x05, 0x02, 0x64, 0x00, 0x21, 0x6a, 0x02, 0x00, 0x00, 0x05,
  0x03, 0x6b, 0x00, 0x22, 0xbb, 0x01, 0x00, 0x00, 0x05, 0x04, 0x6c, 0x00,
  0x27, 0x41, 0x03, 0x00, 0x00, 0x05, 0x05, 0x6d, 0x00, 0x23, 0x60, 0x05,
  0x00, 0x00, 0x06, 0x0a, 0x18, 0x02, 0x00, 0x00, 0x05, 0x06, 0x72, 0x00,
  0x2c, 0x0b, 0x04, 0x00, 0x00, 0x05, 0x07, 0x73, 0x00, 0x32, 0x92, 0x05,
  0x00, 0x00, 0x07, 0x00, 0x08, 0x02, 0x91, 0x00, 0x61, 0x00, 0x35, 0xfc,
  0x04, 0x00, 0x00, 0x00, 0x07, 0x01, 0x08, 0x02, 0x91, 0x00, 0x61, 0x00,
  0x36, 0xfc, 0x04, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0b, 0x70, 0x02, 0x00,
  0x00, 0x05, 0x08, 0x74, 0x00, 0x3a, 0xcd, 0x04, 0x00, 0x00, 0x05, 0x09,
  0x73, 0x00, 0x54, 0x92, 0x05, 0x00, 0x00, 0x07, 0x02, 0x09, 0x75, 0x00,
  0x40, 0xa0, 0x01, 0x00, 0x00, 0x06, 0x0c, 0x28, 0x01, 0x00, 0x00, 0x08,
  0x02, 0x91, 0x00, 0x61, 0x00, 0x42, 0x0c, 0x05, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x0a, 0x1f, 0x01, 0x00, 0x00, 0x0b, 0x28, 0x01, 0x00, 0x00,
  0x14, 0x00, 0x0c, 0x24, 0x01, 0x00, 0x00, 0x0d, 0x04, 0x06, 0x01, 0x0e,
  0x05, 0x08, 0x07, 0x0a, 0x1f, 0x01, 0x00, 0x00, 0x0b, 0x28, 0x01, 0x00,
  0x00, 0x17, 0x00, 0x0a, 0x1f, 0x01, 0x00, 0x00, 0x0b, 0x28, 0x01, 0x00,
  0x00, 0x44, 0x00, 0x0f, 0x07, 0x4f, 0x01, 0x00, 0x00, 0x00, 0x5d, 0x02,
  0xa1, 0x05, 0x0a, 0x24, 0x01, 0x00, 0x00, 0x0b, 0x28, 0x01, 0x00, 0x00,
  0x0d, 0x00, 0x0f, 0x08, 0x66, 0x01, 0x00, 0x00, 0x00, 0x10, 0x02, 0xa1,
  0x06, 0x10, 0x20, 0x00, 0x0b, 0x11, 0x09, 0x8f, 0x01, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x11, 0x0b, 0xa4, 0x01, 0x00, 0x00, 0x00, 0x0d, 0x08, 0x11,
  0x0c, 0xb6, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x10, 0x11, 0x10, 0xb6, 0x01,
  0x00, 0x00, 0x00, 0x0f, 0x18, 0x00, 0x12, 0x94, 0x01, 0x00, 0x00, 0x0a,
  0xa0, 0x01, 0x00, 0x00, 0x0b, 0x28, 0x01, 0x00, 0x00, 0x01, 0x00, 0x0d,
  0x0a, 0x05, 0x04, 0x12, 0xa9, 0x01, 0x00, 0x00, 0x0a, 0xa0, 0x01, 0x00,
  0x00, 0x13, 0x28, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x12, 0xbb, 0x01,
  0x00, 0x00, 0x14, 0xc3, 0x01, 0x00, 0x00, 0x0f, 0x02, 0x1e, 0x14, 0xcb,
  0x01, 0x00, 0x00, 0x0e, 0x01, 0x1b, 0x0d, 0x0d, 0x07, 0x04, 0x0f, 0x11,
  0xda, 0x01, 0x00, 0x00, 0x00, 0x16, 0x02, 0xa1, 0x07, 0x10, 0x20, 0x00,
  0x11, 0x11, 0x09, 0x8f, 0x01, 0x00, 0x00, 0x00, 0x12, 0x00, 0x11, 0x0b,
  0xa4, 0x01, 0x00, 0x00, 0x00, 0x13, 0x08, 0x11, 0x0c, 0xb6, 0x01, 0x00,
  0x00, 0x00, 0x14, 0x10, 0x11, 0x10, 0x03, 0x02, 0x00, 0x00, 0x00, 0x15,
  0x18, 0x00, 0x12, 0xc3, 0x01, 0x00, 0x00, 0x0f, 0x12, 0x13, 0x02, 0x00,
  0x00, 0x00, 0x1c, 0x02, 0xa1, 0x08, 0x10, 0x20, 0x00, 0x17, 0x11, 0x09,
  0x8f, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x11, 0x0b, 0xa4, 0x01, 0x00,
  0x00, 0x00, 0x19, 0x08, 0x11, 0x0c, 0xb6, 0x01, 0x00, 0x00, 0x00, 0x1a,
  0x10, 0x11, 0x10, 0x3c, 0x02, 0x00, 0x00, 0x00, 0x1b, 0x18, 0x00, 0x12,
  0x41, 0x02, 0x00, 0x00, 0x14, 0x49, 0x02, 0x00, 0x00, 0x14, 0x01, 0x15,
  0x0d, 0x13, 0x08, 0x01, 0x15, 0x15, 0x55, 0x02, 0x00, 0x00, 0x03, 0x38,
  0x12, 0x5a, 0x02, 0x00, 0x00, 0x16, 0x6a, 0x02, 0x00, 0x00, 0x17, 0x6a,
  0x02, 0x00, 0x00, 0x17, 0x6b, 0x02, 0x00, 0x00, 0x00, 0x18, 0x12, 0x70,
  0x02, 0x00, 0x00, 0x19, 0x15, 0x16, 0x79, 0x02, 0x00, 0x00, 0x03, 0xb1,
  0x12, 0x7e, 0x02, 0x00, 0x00, 0x16, 0x8f, 0x02, 0x00, 0x00, 0x17, 0x93,
  0x02, 0x00, 0x00, 0x17, 0xc3, 0x01, 0x00, 0x00, 0x1a, 0x00, 0x0d, 0x17,
  0x05, 0x08, 0x12, 0x1f, 0x01, 0x00, 0x00, 0x1b, 0x18, 0xa1, 0x02, 0x00,
  0x00, 0x03, 0x18, 0x10, 0x12, 0xa6, 0x02, 0x00, 0x00, 0x16, 0x8f, 0x02,
  0x00, 0x00, 0x17, 0x93, 0x02, 0x00, 0x00, 0x17, 0xc3, 0x01, 0x00, 0x00,
  0x17, 0x6b, 0x02, 0x00, 0x00, 0x17, 0xc3, 0x01, 0x00, 0x00, 0x00, 0x1c,
  0xcb, 0x01, 0x00, 0x00, 0x1e, 0x04, 0x04, 0xc5, 0x17, 0x1d, 0x19, 0x00,
  0x1d, 0x1a, 0x01, 0x1d, 0x1b, 0x02, 0x1d, 0x1c, 0x03, 0x1d, 0x1d, 0x04,
  0x00, 0x1e, 0xcb, 0x01, 0x00, 0x00, 0x04, 0x05, 0x1d, 0x1d, 0x1f, 0x00,
  0x1d, 0x20, 0x01, 0x1d, 0x21, 0x02, 0x1d, 0x22, 0x04, 0x1d, 0x23, 0x06,
  0x1d, 0x24, 0x08, 0x1d, 0x25, 0x0c, 0x1d, 0x26, 0x11, 0x1d, 0x27, 0x16,
  0x1d, 0x28, 0x1d, 0x1d, 0x29, 0x21, 0x1d, 0x2a, 0x29, 0x1d, 0x2b, 0x2e,
  0x1d, 0x2c, 0x2f, 0x1d, 0x2d, 0x32, 0x1d, 0x2e, 0x33, 0x1d, 0x2f, 0x5c,
  0x1d, 0x30, 0x5e, 0x1d, 0x31, 0x62, 0x1d, 0x32, 0x67, 0x1d, 0x33, 0x6c,
  0x1d, 0x34, 0x73, 0x1d, 0x35, 0x84, 0x01, 0x1d, 0x36, 0x88, 0x01, 0x1d,
  0x37, 0x89, 0x01, 0x1d, 0x38, 0x8f, 0x01, 0x1d, 0x39, 0xff, 0x01, 0x1d,
  0x3a, 0x86, 0x02, 0x1d, 0x3b, 0x87, 0x02, 0x00, 0x12, 0x46, 0x03, 0x00,
  0x00, 0x1f, 0x4c, 0x14, 0x06, 0x57, 0x20, 0x3c, 0x41, 0x02, 0x00, 0x00,
  0x06, 0x59, 0x01, 0x04, 0x04, 0x00, 0x20, 0x3d, 0x41, 0x02, 0x00, 0x00,
  0x06, 0x5a, 0x01, 0x04, 0x00, 0x00, 0x11, 0x3e, 0x41, 0x02, 0x00, 0x00,
  0x06, 0x61, 0x01, 0x11, 0x3f, 0xef, 0x03, 0x00, 0x00, 0x06, 0x62, 0x02,
  0x11, 0x43, 0xef, 0x03, 0x00, 0x00, 0x06, 0x63, 0x04, 0x11, 0x44, 0xef,
  0x03, 0x00, 0x00, 0x06, 0x64, 0x06, 0x11, 0x45, 0x41, 0x02, 0x00, 0x00,
  0x06, 0x65, 0x08, 0x11, 0x46, 0x41, 0x02, 0x00, 0x00, 0x06, 0x66, 0x09,
  0x11, 0x47, 0x03, 0x04, 0x00, 0x00, 0x06, 0x67, 0x0a, 0x21, 0xaa, 0x03,
  0x00, 0x00, 0x06, 0x68, 0x0c, 0x22, 0x08, 0x06, 0x68, 0x21, 0xb6, 0x03,
  0x00, 0x00, 0x06, 0x68, 0x00, 0x10, 0x08, 0x06, 0x68, 0x11, 0x49, 0xbb,
  0x01, 0x00, 0x00, 0x06, 0x68, 0x00, 0x11, 0x4a, 0xbb, 0x01, 0x00, 0x00,
  0x06, 0x68, 0x04, 0x00, 0x11, 0x4b, 0xd6, 0x03, 0x00, 0x00, 0x06, 0x68,
  0x00, 0x10, 0x08, 0x06, 0x68, 0x11, 0x49, 0xbb, 0x01, 0x00, 0x00, 0x06,
  0x68, 0x00, 0x11, 0x4a, 0xbb, 0x01, 0x00, 0x00, 0x06, 0x68, 0x04, 0x00,
  0x00, 0x00, 0x14, 0xf7, 0x03, 0x00, 0x00, 0x42, 0x02, 0x1c, 0x14, 0xff,
  0x03, 0x00, 0x00, 0x41, 0x01, 0x18, 0x0d, 0x40, 0x07, 0x02, 0x14, 0xf7,
  0x03, 0x00, 0x00, 0x48, 0x02, 0x22, 0x12, 0x10, 0x04, 0x00, 0x00, 0x1f,
  0x5d, 0x14, 0x07, 0x19, 0x11, 0x4d, 0xef, 0x03, 0x00, 0x00, 0x07, 0x1a,
  0x00, 0x11, 0x4e, 0xef, 0x03, 0x00, 0x00, 0x07, 0x1b, 0x02, 0x11, 0x4f,
  0xbb, 0x01, 0x00, 0x00, 0x07, 0x1c, 0x04, 0x11, 0x50, 0xbb, 0x01, 0x00,
  0x00, 0x07, 0x1d, 0x08, 0x20, 0x51, 0xf7, 0x03, 0x00, 0x00, 0x07, 0x1f,
  0x02, 0x04, 0x0c, 0x0c, 0x20, 0x52, 0xf7, 0x03, 0x00, 0x00, 0x07, 0x20,
  0x02, 0x04, 0x08, 0x0c, 0x20, 0x53, 0xf7, 0x03, 0x00, 0x00, 0x07, 0x21,
  0x02, 0x01, 0x07, 0x0c, 0x20, 0x54, 0xf7, 0x03, 0x00, 0x00, 0x07, 0x22,
  0x02, 0x01, 0x06, 0x0c, 0x20, 0x55, 0xf7, 0x03, 0x00, 0x00, 0x07, 0x23,
  0x02, 0x01, 0x05, 0x0c, 0x20, 0x56, 0xf7, 0x03, 0x00, 0x00, 0x07, 0x24,
  0x02, 0x01, 0x04, 0x0c, 0x20, 0x57, 0xf7, 0x03, 0x00, 0x00, 0x07, 0x25,
  0x02, 0x01, 0x03, 0x0c, 0x20, 0x58, 0xf7, 0x03, 0x00, 0x00, 0x07, 0x26,
  0x02, 0x01, 0x02, 0x0c, 0x20, 0x59, 0xf7, 0x03, 0x00, 0x00, 0x07, 0x27,
  0x02, 0x01, 0x01, 0x0c, 0x20, 0x5a, 0xf7, 0x03, 0x00, 0x00, 0x07, 0x28,
  0x02, 0x01, 0x00, 0x0c, 0x11, 0x5b, 0xef, 0x03, 0x00, 0x00, 0x07, 0x37,
  0x0e, 0x11, 0x47, 0x03, 0x04, 0x00, 0x00, 0x07, 0x38, 0x10, 0x11, 0x5c,
  0xef, 0x03, 0x00, 0x00, 0x07, 0x39, 0x12, 0x00, 0x12, 0xd2, 0x04, 0x00,
  0x00, 0x1f, 0x5f, 0x08, 0x08, 0x17, 0x11, 0x4d, 0xef, 0x03, 0x00, 0x00,
  0x08, 0x18, 0x00, 0x11, 0x4e, 0xef, 0x03, 0x00, 0x00, 0x08, 0x19, 0x02,
  0x11, 0x5e, 0xef, 0x03, 0x00, 0x00, 0x08, 0x1a, 0x04, 0x11, 0x47, 0x03,
  0x04, 0x00, 0x00, 0x08, 0x1b, 0x06, 0x00, 0x0a, 0x08, 0x05, 0x00, 0x00,
  0x0b, 0x28, 0x01, 0x00, 0x00, 0x05, 0x00, 0x0d, 0x62, 0x07, 0x08, 0x0a,
  0x08, 0x05, 0x00, 0x00, 0x0b, 0x28, 0x01, 0x00, 0x00, 0x09, 0x00, 0x12,
  0x1d, 0x05, 0x00, 0x00, 0x23, 0x6a, 0x18, 0x04, 0xd0, 0x17, 0x24, 0x64,
  0xc3, 0x01, 0x00, 0x00, 0x04, 0xd1, 0x17, 0x00, 0x24, 0x65, 0xc3, 0x01,
  0x00, 0x00, 0x04, 0xd2, 0x17, 0x04, 0x24, 0x66, 0xc3, 0x01, 0x00, 0x00,
  0x04, 0xd3, 0x17, 0x08, 0x24, 0x67, 0xc3, 0x01, 0x00, 0x00, 0x04, 0xd5,
  0x17, 0x0c, 0x24, 0x68, 0xc3, 0x01, 0x00, 0x00, 0x04, 0xd6, 0x17, 0x10,
  0x24, 0x69, 0xc3, 0x01, 0x00, 0x00, 0x04, 0xd8, 0x17, 0x14, 0x00, 0x12,
  0x65, 0x05, 0x00, 0x00, 0x1f, 0x71, 0x0e, 0x09, 0xad, 0x11, 0x6e, 0x86,
  0x05, 0x00, 0x00, 0x09, 0xae, 0x00, 0x11, 0x6f, 0x86, 0x05, 0x00, 0x00,
  0x09, 0xaf, 0x06, 0x11, 0x70, 0xef, 0x03, 0x00, 0x00, 0x09, 0xb0, 0x0c,
  0x00, 0x0a, 0x49, 0x02, 0x00, 0x00, 0x0b, 0x28, 0x01, 0x00, 0x00, 0x06,
  0x00, 0x12, 0xa0, 0x01, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x05,
  0x00, 0x08, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x17,
  0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x04, 0xf8, 0x01, 0x80, 0x03,
  0x04, 0x88, 0x03, 0xb0, 0x03, 0x00, 0x04, 0xb0, 0x03, 0xb8, 0x04, 0x04,
  0xc0, 0x04, 0xf0, 0x04, 0x00, 0x04, 0xa8, 0x05, 0x90, 0x06, 0x04, 0xb8,
  0x07, 0xe0, 0x09, 0x00, 0xdc, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00,
  0x54, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00,
  0x75, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00,
  0x8b, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00,
  0xa0, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0xb1, 0x00, 0x00, 0x00,
  0xb7, 0x00, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00,
  0xd2, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0xec, 0x00, 0x00, 0x00,
  0xf1, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00,
  0x1b, 0x01, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0x39, 0x01, 0x00, 0x00,
  0x42, 0x01, 0x00, 0x00, 0x4b, 0x01, 0x00, 0x00, 0x52, 0x01, 0x00, 0x00,
  0x5f, 0x01, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, 0x75, 0x01, 0x00, 0x00,
  0x82, 0x01, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00,
  0xa8, 0x01, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
  0xcc, 0x01, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00,
  0xf0, 0x01, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00,
  0x16, 0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00,
  0x39, 0x02, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00,
  0x62, 0x02, 0x00, 0x00, 0x6f, 0x02, 0x00, 0x00, 0x7c, 0x02, 0x00, 0x00,
  0x89, 0x02, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0xa6, 0x02, 0x00, 0x00,
  0xb7, 0x02, 0x00, 0x00, 0xc3, 0x02, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00,
  0xdd, 0x02, 0x00, 0x00, 0xe1, 0x02, 0x00, 0x00, 0xe9, 0x02, 0x00, 0x00,
  0xed, 0x02, 0x00, 0x00, 0xf5, 0x02, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00,
  0x0a, 0x03, 0x00, 0x00, 0x11, 0x03, 0x00, 0x00, 0x14, 0x03, 0x00, 0x00,
  0x1d, 0x03, 0x00, 0x00, 0x21, 0x03, 0x00, 0x00, 0x2a, 0x03, 0x00, 0x00,
  0x30, 0x03, 0x00, 0x00, 0x38, 0x03, 0x00, 0x00, 0x3e, 0x03, 0x00, 0x00,
  0x44, 0x03, 0x00, 0x00, 0x4a, 0x03, 0x00, 0x00, 0x50, 0x03, 0x00, 0x00,
  0x57, 0x03, 0x00, 0x00, 0x5c, 0x03, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00,
  0x68, 0x03, 0x00, 0x00, 0x6d, 0x03, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00,
  0x76, 0x03, 0x00, 0x00, 0x7a, 0x03, 0x00, 0x00, 0x7e, 0x03, 0x00, 0x00,
  0x82, 0x03, 0x00, 0x00, 0x86, 0x03, 0x00, 0x00, 0x8a, 0x03, 0x00, 0x00,
  0x8e, 0x03, 0x00, 0x00, 0x92, 0x03, 0x00, 0x00, 0x99, 0x03, 0x00, 0x00,
  0xa1, 0x03, 0x00, 0x00, 0xa8, 0x03, 0x00, 0x00, 0xac, 0x03, 0x00, 0x00,
  0xb3, 0x03, 0x00, 0x00, 0xba, 0x03, 0x00, 0x00, 0xc3, 0x03, 0x00, 0x00,
  0xd6, 0x03, 0x00, 0x00, 0xda, 0x03, 0x00, 0x00, 0xdf, 0x03, 0x00, 0x00,
  0xe8, 0x03, 0x00, 0x00, 0xf2, 0x03, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00,
  0x11, 0x04, 0x00, 0x00, 0x20, 0x04, 0x00, 0x00, 0x27, 0x04, 0x00, 0x00,
  0x2d, 0x04, 0x00, 0x00, 0x30, 0x04, 0x00, 0x00, 0x34, 0x04, 0x00, 0x00,
  0x3b, 0x04, 0x00, 0x00, 0x44, 0x04, 0x00, 0x00, 0x4c, 0x04, 0x00, 0x00,
  0x53, 0x04, 0x00, 0x00, 0x57, 0x04, 0x00, 0x00, 0x62, 0x04, 0x00, 0x00,
  0x66, 0x04, 0x00, 0x00, 0x44, 0x65, 0x62, 0x69, 0x61, 0x6e, 0x20, 0x63,
  0x6c, 0x61, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
  0x20, 0x31, 0x34, 0x2e, 0x30, 0x2e, 0x36, 0x00, 0x66, 0x69, 0x6c, 0x74,
  0x65, 0x72, 0x2e, 0x62, 0x70, 0x66, 0x2e, 0x63, 0x00, 0x2f, 0x72, 0x6f,
  0x6f, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x6e, 0x65, 0x74,
  0x69, 0x66, 0x79, 0x2d, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x65,
  0x62, 0x70, 0x66, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x63,
  0x6f, 0x64, 0x65, 0x00, 0x5f, 0x5f, 0x5f, 0x5f, 0x66, 0x6d, 0x74, 0x00,
  0x63, 0x68, 0x61, 0x72, 0x00, 0x5f, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59,
  0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x5f,
  0x00, 0x5f, 0x5f, 0x5f, 0x66, 0x6d, 0x74, 0x00, 0x4c, 0x49, 0x43, 0x45,
  0x4e, 0x53, 0x45, 0x00, 0x6d, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x00, 0x74,
  0x79, 0x70, 0x65, 0x00, 0x69, 0x6e, 0x74, 0x00, 0x6d, 0x61, 0x78, 0x5f,
  0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x00, 0x6b, 0x65, 0x79, 0x00,
  0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x74,
  0x00, 0x5f, 0x5f, 0x75, 0x33, 0x32, 0x00, 0x5f, 0x5f, 0x62, 0x65, 0x33,
  0x32, 0x00, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x62, 0x6c, 0x6f, 0x63,
  0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x00, 0x79, 0x6f,
  0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x00, 0x75, 0x6e,
  0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x63, 0x68, 0x61, 0x72, 0x00,
  0x5f, 0x5f, 0x75, 0x38, 0x00, 0x62, 0x70, 0x66, 0x5f, 0x6d, 0x61, 0x70,
  0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x65, 0x6c, 0x65, 0x6d,
  0x00, 0x62, 0x70, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70,
  0x72, 0x69, 0x6e, 0x74, 0x6b, 0x00, 0x6c, 0x6f, 0x6e, 0x67, 0x00, 0x62,
  0x70, 0x66, 0x5f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x76, 0x70, 0x72,
  0x69, 0x6e, 0x74, 0x6b, 0x00, 0x58, 0x44, 0x50, 0x5f, 0x41, 0x42, 0x4f,
  0x52, 0x54, 0x45, 0x44, 0x00, 0x58, 0x44, 0x50, 0x5f, 0x44, 0x52, 0x4f,
  0x50, 0x00, 0x58, 0x44, 0x50, 0x5f, 0x50, 0x41, 0x53, 0x53, 0x00, 0x58,
  0x44, 0x50, 0x5f, 0x54, 0x58, 0x00, 0x58, 0x44, 0x50, 0x5f, 0x52, 0x45,
  0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x00, 0x78, 0x64, 0x70, 0x5f, 0x61,
  0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54,
  0x4f, 0x5f, 0x49, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f,
  0x5f, 0x49, 0x43, 0x4d, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54,
  0x4f, 0x5f, 0x49, 0x47, 0x4d, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f,
  0x54, 0x4f, 0x5f, 0x49, 0x50, 0x49, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52,
  0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x43, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52,
  0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x47, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52,
  0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x55, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52,
  0x4f, 0x54, 0x4f, 0x5f, 0x55, 0x44, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52,
  0x4f, 0x54, 0x4f, 0x5f, 0x49, 0x44, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52,
  0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f,
  0x54, 0x4f, 0x5f, 0x44, 0x43, 0x43, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52,
  0x4f, 0x54, 0x4f, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x00, 0x49, 0x50, 0x50,
  0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52, 0x53, 0x56, 0x50, 0x00, 0x49, 0x50,
  0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x47, 0x52, 0x45, 0x00, 0x49, 0x50,
  0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x53, 0x50, 0x00, 0x49, 0x50,
  0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x41, 0x48, 0x00, 0x49, 0x50, 0x50,
  0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x54, 0x50, 0x00, 0x49, 0x50, 0x50,
  0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x42, 0x45, 0x45, 0x54, 0x50, 0x48, 0x00,
  0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x4e, 0x43, 0x41,
  0x50, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x50, 0x49,
  0x4d, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x43, 0x4f,
  0x4d, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4c,
  0x32, 0x54, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f,
  0x53, 0x43, 0x54, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f,
  0x5f, 0x55, 0x44, 0x50, 0x4c, 0x49, 0x54, 0x45, 0x00, 0x49, 0x50, 0x50,
  0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d, 0x50, 0x4c, 0x53, 0x00, 0x49, 0x50,
  0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x45, 0x54, 0x48, 0x45, 0x52, 0x4e,
  0x45, 0x54, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x52,
  0x41, 0x57, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x4d,
  0x50, 0x54, 0x43, 0x50, 0x00, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f,
  0x5f, 0x4d, 0x41, 0x58, 0x00, 0x69, 0x68, 0x6c, 0x00, 0x76, 0x65, 0x72,
  0x73, 0x69, 0x6f, 0x6e, 0x00, 0x74, 0x6f, 0x73, 0x00, 0x74, 0x6f, 0x74,
  0x5f, 0x6c, 0x65, 0x6e, 0x00, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e, 0x65,
  0x64, 0x20, 0x73, 0x68, 0x6f, 0x72, 0x74, 0x00, 0x5f, 0x5f, 0x75, 0x31,
  0x36, 0x00, 0x5f, 0x5f, 0x62, 0x65, 0x31, 0x36, 0x00, 0x69, 0x64, 0x00,
  0x66, 0x72, 0x61, 0x67, 0x5f, 0x6f, 0x66, 0x66, 0x00, 0x74, 0x74, 0x6c,
  0x00, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x00, 0x63, 0x68,
  0x65, 0x63, 0x6b, 0x00, 0x5f, 0x5f, 0x73, 0x75, 0x6d, 0x31, 0x36, 0x00,
  0x73, 0x61, 0x64, 0x64, 0x72, 0x00, 0x64, 0x61, 0x64, 0x64, 0x72, 0x00,
  0x61, 0x64, 0x64, 0x72, 0x73, 0x00, 0x69, 0x70, 0x68, 0x64, 0x72, 0x00,
  0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x00, 0x64, 0x65, 0x73, 0x74, 0x00,
  0x73, 0x65, 0x71, 0x00, 0x61, 0x63, 0x6b, 0x5f, 0x73, 0x65, 0x71, 0x00,
  0x72, 0x65, 0x73, 0x31, 0x00, 0x64, 0x6f, 0x66, 0x66, 0x00, 0x66, 0x69,
  0x6e, 0x00, 0x73, 0x79, 0x6e, 0x00, 0x72, 0x73, 0x74, 0x00, 0x70, 0x73,
  0x68, 0x00, 0x61, 0x63, 0x6b, 0x00, 0x75, 0x72, 0x67, 0x00, 0x65, 0x63,
  0x65, 0x00, 0x63, 0x77, 0x72, 0x00, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
  0x00, 0x75, 0x72, 0x67, 0x5f, 0x70, 0x74, 0x72, 0x00, 0x74, 0x63, 0x70,
  0x68, 0x64, 0x72, 0x00, 0x6c, 0x65, 0x6e, 0x00, 0x75, 0x64, 0x70, 0x68,
  0x64, 0x72, 0x00, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x00, 0x5f, 0x5f,
  0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x00, 0x75, 0x6e, 0x73, 0x69, 0x67,
  0x6e, 0x65, 0x64, 0x20, 0x6c, 0x6f, 0x6e, 0x67, 0x20, 0x6c, 0x6f, 0x6e,
  0x67, 0x00, 0x63, 0x74, 0x78, 0x00, 0x64, 0x61, 0x74, 0x61, 0x00, 0x64,
  0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x00, 0x64, 0x61, 0x74, 0x61,
  0x5f, 0x6d, 0x65, 0x74, 0x61, 0x00, 0x69, 0x6e, 0x67, 0x72, 0x65, 0x73,
  0x73, 0x5f, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x00, 0x72, 0x78,
  0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
  0x00, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x66, 0x69, 0x6e,
  0x64, 0x65, 0x78, 0x00, 0x78, 0x64, 0x70, 0x5f, 0x6d, 0x64, 0x00, 0x69,
  0x6e, 0x64, 0x65, 0x78, 0x00, 0x69, 0x70, 0x00, 0x65, 0x74, 0x68, 0x00,
  0x68, 0x5f, 0x64, 0x65, 0x73, 0x74, 0x00, 0x68, 0x5f, 0x73, 0x6f, 0x75,
  0x72, 0x63, 0x65, 0x00, 0x68, 0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x00,
  0x65, 0x74, 0x68, 0x68, 0x64, 0x72, 0x00, 0x74, 0x63, 0x70, 0x00, 0x72,
  0x65, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x75, 0x64,
  0x70, 0x00, 0x79, 0x74, 0x5f, 0x69, 0x70, 0x00, 0x6c, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xb8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x9f, 0xeb, 0x01, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xa0, 0x03, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00, 0x75, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x02, 0x08, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0x09, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x08, 0x0a, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00,
  0x33, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
  0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x0b, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x0e, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08,
  0x0f, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
  0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x05, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
  0x07, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x09, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x20, 0x00, 0x00, 0x00,
  0x33, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00,
  0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x13, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
  0x16, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x04,
  0x18, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0d,
  0x02, 0x00, 0x00, 0x00, 0xcf, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
  0xd3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0c, 0x17, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x1a, 0x00, 0x00, 0x00,
  0x04, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x09, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e,
  0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x26, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x1d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x36, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x07, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x0e, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x1a, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x23, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x5f, 0x07, 0x00, 0x00, 0x03, 0x00, 0x00, 0x0f,
  0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x65, 0x07, 0x00, 0x00, 0x05, 0x00, 0x00, 0x0f,
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x6d, 0x07, 0x00, 0x00, 0x01, 0x00, 0x00, 0x0f,
  0x00, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x69, 0x6e, 0x74, 0x00, 0x5f, 0x5f, 0x41,
  0x52, 0x52, 0x41, 0x59, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x5f, 0x54, 0x59,
  0x50, 0x45, 0x5f, 0x5f, 0x00, 0x5f, 0x5f, 0x62, 0x65, 0x33, 0x32, 0x00,
  0x5f, 0x5f, 0x75, 0x33, 0x32, 0x00, 0x75, 0x6e, 0x73, 0x69, 0x67, 0x6e,
  0x65, 0x64, 0x20, 0x69, 0x6e, 0x74, 0x00, 0x74, 0x79, 0x70, 0x65, 0x00,
  0x6d, 0x61, 0x78, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x00,
  0x6b, 0x65, 0x79, 0x00, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x00, 0x6d, 0x79,
  0x5f, 0x6d, 0x61, 0x70, 0x00, 0x5f, 0x5f, 0x75, 0x38, 0x00, 0x75, 0x6e,
  0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x20, 0x63, 0x68, 0x61, 0x72, 0x00,
  0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x00,
  0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
  0x73, 0x00, 0x78, 0x64, 0x70, 0x5f, 0x6d, 0x64, 0x00, 0x64, 0x61, 0x74,
  0x61, 0x00, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x00, 0x64,
  0x61, 0x74, 0x61, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x00, 0x69, 0x6e, 0x67,
  0x72, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x66, 0x69, 0x6e, 0x64, 0x65, 0x78,
  0x00, 0x72, 0x78, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65, 0x5f, 0x69, 0x6e,
  0x64, 0x65, 0x78, 0x00, 0x65, 0x67, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x69,
  0x66, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x00, 0x63, 0x74, 0x78, 0x00, 0x66,
  0x69, 0x6c, 0x74, 0x65, 0x72, 0x00, 0x78, 0x64, 0x70, 0x00, 0x2f, 0x72,
  0x6f, 0x6f, 0x74, 0x2f, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x6e, 0x65,
  0x74, 0x69, 0x66, 0x79, 0x2d, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f,
  0x65, 0x62, 0x70, 0x66, 0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f,
  0x63, 0x6f, 0x64, 0x65, 0x2f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
  0x62, 0x70, 0x66, 0x2e, 0x63, 0x00, 0x20, 0x20, 0x20, 0x20, 0x76, 0x6f,
  0x69, 0x64, 0x20, 0x2a, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64,
  0x20, 0x3d, 0x20, 0x28, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x2a, 0x29, 0x28,
  0x6c, 0x6f, 0x6e, 0x67, 0x29, 0x63, 0x74, 0x78, 0x2d, 0x3e, 0x64, 0x61,
  0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x3b, 0x00, 0x20, 0x20, 0x20, 0x20,
  0x76, 0x6f, 0x69, 0x64, 0x20, 0x2a, 0x64, 0x61, 0x74, 0x61, 0x20, 0x3d,
  0x20, 0x28, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x2a, 0x29, 0x28, 0x6c, 0x6f,
  0x6e, 0x67, 0x29, 0x63, 0x74, 0x78, 0x2d, 0x3e, 0x64, 0x61, 0x74, 0x61,
  0x3b, 0x00, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x5f, 0x62, 0x65, 0x33, 0x32,
  0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x00,
  0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x28, 0x76, 0x6f, 0x69,
  0x64, 0x20, 0x2a, 0x29, 0x28, 0x69, 0x70, 0x20, 0x2b, 0x20, 0x31, 0x29,
  0x20, 0x3e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x29,
  0x00, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x69, 0x70, 0x2d,
  0x3e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x3d,
  0x20, 0x49, 0x50, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x5f, 0x54, 0x43, 0x50,
  0x29, 0x20, 0x7b, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x69, 0x66, 0x20, 0x28, 0x28, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x2a, 0x29,
  0x28, 0x74, 0x63, 0x70, 0x20, 0x2b, 0x20, 0x31, 0x29, 0x20, 0x3e, 0x20,
  0x64, 0x61, 0x74, 0x61, 0x5f, 0x65, 0x6e, 0x64, 0x29, 0x00, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20,
  0x3d, 0x20, 0x69, 0x70, 0x2d, 0x3e, 0x73, 0x61, 0x64, 0x64, 0x72, 0x20,
  0x5e, 0x20, 0x69, 0x70, 0x2d, 0x3e, 0x64, 0x61, 0x64, 0x64, 0x72, 0x20,
  0x5e, 0x20, 0x74, 0x63, 0x70, 0x2d, 0x3e, 0x73, 0x6f, 0x75, 0x72, 0x63,
  0x65, 0x20, 0x5e, 0x20, 0x74, 0x63, 0x70, 0x2d, 0x3e, 0x64, 0x65, 0x73,
  0x74, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c,
  0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x65,
  0x78, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x6e,
  0x74, 0x20, 0x2a, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75,
  0x65, 0x20, 0x3d, 0x20, 0x62, 0x70, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x5f,
  0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x28,
  0x26, 0x6d, 0x79, 0x5f, 0x6d, 0x61, 0x70, 0x2c, 0x20, 0x26, 0x69, 0x6e,
  0x64, 0x65, 0x78, 0x29, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x63, 0x68, 0x65,
  0x63, 0x6b, 0x20, 0x69, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e,
  0x64, 0x65, 0x78, 0x20, 0x69, 0x73, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x68,
  0x65, 0x20, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x77, 0x65,
  0x62, 0x73, 0x69, 0x74, 0x65, 0x73, 0x20, 0x6d, 0x61, 0x70, 0x00, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x28, 0x72, 0x65,
  0x61, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x29, 0x20, 0x7b, 0x00,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x62, 0x70, 0x66, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x6b, 0x28, 0x22,
  0x44, 0x72, 0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x54, 0x43, 0x50,
  0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x29, 0x3b, 0x00, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62,
  0x70, 0x66, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x6b, 0x28, 0x22, 0x73,
  0x72, 0x63, 0x3a, 0x20, 0x25, 0x64, 0x2e, 0x25, 0x64, 0x2e, 0x25, 0x64,
  0x2e, 0x25, 0x64, 0x2c, 0x20, 0x30, 0x78, 0x25, 0x78, 0x22, 0x2c, 0x20,
  0x69, 0x70, 0x2d, 0x3e, 0x73, 0x61, 0x64, 0x64, 0x72, 0x20, 0x26, 0x20,
  0x30, 0x78, 0x66, 0x66, 0x2c, 0x20, 0x28, 0x69, 0x70, 0x2d, 0x3e, 0x73,
  0x61, 0x64, 0x64, 0x72, 0x20, 0x3e, 0x3e, 0x20, 0x38, 0x29, 0x20, 0x26,
  0x20, 0x30, 0x78, 0x66, 0x66, 0x2c, 0x20, 0x28, 0x69, 0x70, 0x2d, 0x3e,
  0x73, 0x61, 0x64, 0x64, 0x72, 0x20, 0x3e, 0x3e, 0x20, 0x31, 0x36, 0x29,
  0x20, 0x26, 0x20, 0x30, 0x78, 0x66, 0x66, 0x2c, 0x20, 0x28, 0x69, 0x70,
  0x2d, 0x3e, 0x73, 0x61, 0x64, 0x64, 0x72, 0x20, 0x3e, 0x3e, 0x20, 0x32,
  0x34, 0x29, 0x20, 0x26, 0x20, 0x30, 0x78, 0x66, 0x66, 0x2c, 0x20, 0x69,
  0x70, 0x2d, 0x3e, 0x73, 0x61, 0x64, 0x64, 0x72, 0x29, 0x3b, 0x00, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62,
  0x70, 0x66, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x6b, 0x28, 0x22, 0x64,
  0x73, 0x74, 0x3a, 0x20, 0x25, 0x64, 0x2e, 0x25, 0x64, 0x2e, 0x25, 0x64,
  0x2e, 0x25, 0x64, 0x2c, 0x20, 0x30, 0x78, 0x25, 0x78, 0x22, 0x2c, 0x20,
  0x69, 0x70, 0x2d, 0x3e, 0x64, 0x61, 0x64, 0x64, 0x72, 0x20, 0x26, 0x20,
  0x30, 0x78, 0x66, 0x66, 0x2c, 0x20, 0x28, 0x69, 0x70, 0x2d, 0x3e, 0x64,
  0x61, 0x64, 0x64, 0x72, 0x20, 0x3e, 0x3e, 0x20, 0x38, 0x29, 0x20, 0x26,
  0x20, 0x30, 0x78, 0x66, 0x66, 0x2c, 0x20, 0x28, 0x69, 0x70, 0x2d, 0x3e,
  0x64, 0x61, 0x64, 0x64, 0x72, 0x20, 0x3e, 0x3e, 0x20, 0x31, 0x36, 0x29,
  0x20, 0x26, 0x20, 0x30, 0x78, 0x66, 0x66, 0x2c, 0x20, 0x28, 0x69, 0x70,
  0x2d, 0x3e, 0x64, 0x61, 0x64, 0x64, 0x72, 0x20, 0x3e, 0x3e, 0x20, 0x32,
  0x34, 0x29, 0x20, 0x26, 0x20, 0x30, 0x78, 0x66, 0x66, 0x2c, 0x20, 0x69,
  0x70, 0x2d, 0x3e, 0x64, 0x61, 0x64, 0x64, 0x72, 0x29, 0x3b, 0x00, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x28,
  0x76, 0x6f, 0x69, 0x64, 0x20, 0x2a, 0x29, 0x28, 0x75, 0x64, 0x70, 0x20,
  0x2b, 0x20, 0x31, 0x29, 0x20, 0x3e, 0x20, 0x64, 0x61, 0x74, 0x61, 0x5f,
  0x65, 0x6e, 0x64, 0x29, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x28, 0x75, 0x64, 0x70, 0x2d,
  0x3e, 0x64, 0x65, 0x73, 0x74, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x78, 0x62,
  0x62, 0x30, 0x31, 0x20, 0x7c, 0x7c, 0x20, 0x75, 0x64, 0x70, 0x2d, 0x3e,
  0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x78,
  0x62, 0x62, 0x30, 0x31, 0x29, 0x20, 0x7b, 0x00, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x69, 0x6e, 0x74, 0x20, 0x79, 0x74, 0x5f, 0x69, 0x70, 0x20, 0x3d, 0x20,
  0x28, 0x62, 0x70, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x6f, 0x6f,
  0x6b, 0x75, 0x70, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x28, 0x26, 0x79, 0x6f,
  0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x2c, 0x20, 0x26,
  0x69, 0x70, 0x2d, 0x3e, 0x64, 0x61, 0x64, 0x64, 0x72, 0x29, 0x20, 0x7c,
  0x7c, 0x20, 0x62, 0x70, 0x66, 0x5f, 0x6d, 0x61, 0x70, 0x5f, 0x6c, 0x6f,
  0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x65, 0x6c, 0x65, 0x6d, 0x28, 0x26, 0x79,
  0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x69, 0x70, 0x73, 0x2c, 0x20,
  0x26, 0x69, 0x70, 0x2d, 0x3e, 0x73, 0x61, 0x64, 0x64, 0x72, 0x29, 0x29,
  0x3b, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x28, 0x79, 0x74, 0x5f,
  0x69, 0x70, 0x29, 0x20, 0x7b, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x3d, 0x20, 0x69, 0x70,
  0x2d, 0x3e, 0x73, 0x61, 0x64, 0x64, 0x72, 0x20, 0x5e, 0x20, 0x69, 0x70,
  0x2d, 0x3e, 0x64, 0x61, 0x64, 0x64, 0x72, 0x20, 0x5e, 0x20, 0x75, 0x64,
  0x70, 0x2d, 0x3e, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x5e, 0x20,
  0x75, 0x64, 0x70, 0x2d, 0x3e, 0x64, 0x65, 0x73, 0x74, 0x3b, 0x20, 0x2f,
  0x2f, 0x20, 0x63, 0x61, 0x6c, 0x63, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x20,
  0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x00, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x70,
  0x66, 0x5f, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x6b, 0x28, 0x22, 0x44, 0x72,
  0x6f, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x20, 0x55, 0x44, 0x50, 0x20, 0x70,
  0x61, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x29, 0x3b, 0x00, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
  0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x70, 0x66, 0x5f, 0x70, 0x72, 0x69,
  0x6e, 0x74, 0x6b, 0x28, 0x22, 0x44, 0x72, 0x6f, 0x70, 0x70, 0x70, 0x69,
  0x6e, 0x67, 0x20, 0x51, 0x55, 0x49, 0x43, 0x20, 0x66, 0x6f, 0x72, 0x20,
  0x53, 0x52, 0x43, 0x20, 0x49, 0x50, 0x20, 0x25, 0x64, 0x2e, 0x25, 0x64,
  0x2e, 0x25, 0x64, 0x2e, 0x25, 0x64, 0x2c, 0x20, 0x79, 0x74, 0x5f, 0x69,
  0x70, 0x3a, 0x20, 0x25, 0x64, 0x5c, 0x6e, 0x44, 0x53, 0x54, 0x20, 0x49,
  0x50, 0x3a, 0x25, 0x64, 0x2e, 0x25, 0x64, 0x2e, 0x25, 0x64, 0x2e, 0x25,
  0x64, 0x22, 0x2c, 0x20, 0x69, 0x70, 0x2d, 0x3e, 0x64, 0x61, 0x64, 0x64,
  0x72, 0x20, 0x26, 0x20, 0x30, 0x78, 0x66, 0x66, 0x2c, 0x20, 0x28, 0x69,
  0x70, 0x2d, 0x3e, 0x64, 0x61, 0x64, 0x64, 0x72, 0x20, 0x3e, 0x3e, 0x20,
  0x38, 0x29, 0x20, 0x26, 0x20, 0x30, 0x78, 0x66, 0x66, 0x2c, 0x20, 0x28,
  0x69, 0x70, 0x2d, 0x3e, 0x64, 0x61, 0x64, 0x64, 0x72, 0x20, 0x3e, 0x3e,
  0x20, 0x31, 0x36, 0x29, 0x20, 0x26, 0x20, 0x30, 0x78, 0x66, 0x66, 0x2c,
  0x20, 0x28, 0x69, 0x70, 0x2d, 0x3e, 0x64, 0x61, 0x64, 0x64, 0x72, 0x20,
  0x3e, 0x3e, 0x20, 0x32, 0x34, 0x29, 0x20, 0x26, 0x20, 0x30, 0x78, 0x66,
  0x66, 0x2c, 0x20, 0x79, 0x74, 0x5f, 0x69, 0x70, 0x2c, 0x20, 0x69, 0x70,
  0x2d, 0x3e, 0x73, 0x61, 0x64, 0x64, 0x72, 0x20, 0x26, 0x20, 0x30, 0x78,
  0x66, 0x66, 0x2c, 0x20, 0x28, 0x69, 0x70, 0x2d, 0x3e, 0x73, 0x61, 0x64,
  0x64, 0x72, 0x20, 0x3e, 0x3e, 0x20, 0x38, 0x29, 0x20, 0x26, 0x20, 0x30,
  0x78, 0x66, 0x66, 0x2c, 0x20, 0x28, 0x69, 0x70, 0x2d, 0x3e, 0x73, 0x61,
  0x64, 0x64, 0x72, 0x20, 0x3e, 0x3e, 0x20, 0x31, 0x36, 0x29, 0x20, 0x26,
  0x20, 0x30, 0x78, 0x66, 0x66, 0x2c, 0x20, 0x28, 0x69, 0x70, 0x2d, 0x3e,
  0x73, 0x61, 0x64, 0x64, 0x72, 0x20, 0x3e, 0x3e, 0x20, 0x32, 0x34, 0x29,
  0x20, 0x26, 0x20, 0x30, 0x78, 0x66, 0x66, 0x29, 0x3b, 0x00, 0x7d, 0x00,
  0x63, 0x68, 0x61, 0x72, 0x00, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e,
  0x5f, 0x5f, 0x5f, 0x5f, 0x66, 0x6d, 0x74, 0x00, 0x66, 0x69, 0x6c, 0x74,
  0x65, 0x72, 0x2e, 0x5f, 0x5f, 0x5f, 0x66, 0x6d, 0x74, 0x00, 0x66, 0x69,
  0x6c, 0x74, 0x65, 0x72, 0x2e, 0x5f, 0x5f, 0x5f, 0x66, 0x6d, 0x74, 0x2e,
  0x31, 0x00, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x5f, 0x5f, 0x5f,
  0x66, 0x6d, 0x74, 0x2e, 0x32, 0x00, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
  0x2e, 0x5f, 0x5f, 0x5f, 0x5f, 0x66, 0x6d, 0x74, 0x2e, 0x33, 0x00, 0x4c,
  0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x00, 0x2e, 0x6d, 0x61, 0x70, 0x73,
  0x00, 0x2e, 0x72, 0x6f, 0x64, 0x61, 0x74, 0x61, 0x00, 0x6c, 0x69, 0x63,
  0x65, 0x6e, 0x73, 0x65, 0x00, 0x00, 0x00, 0x00, 0x9f, 0xeb, 0x01, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x6c, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xda, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0xda, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00,
  0x29, 0x80, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0x48, 0x01, 0x00, 0x00, 0x25, 0x84, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0x72, 0x01, 0x00, 0x00, 0x0c, 0x88, 0x00, 0x00,
  0x28, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00,
  0x15, 0xa0, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0x88, 0x01, 0x00, 0x00, 0x09, 0xa0, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0x0d, 0xac, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00,
  0x09, 0xac, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0xd4, 0x01, 0x00, 0x00, 0x1a, 0xb4, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, 0x0d, 0xb4, 0x00, 0x00,
  0x68, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00,
  0x15, 0xbc, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0xfe, 0x01, 0x00, 0x00, 0x21, 0xbc, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x1b, 0xbc, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00,
  0x2e, 0xbc, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0xfe, 0x01, 0x00, 0x00, 0x27, 0xbc, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x3c, 0xbc, 0x00, 0x00,
  0x98, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00,
  0x35, 0xbc, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0xfe, 0x01, 0x00, 0x00, 0x0f, 0xbc, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb8, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00,
  0x1b, 0xc8, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0xcb, 0x02, 0x00, 0x00, 0x0c, 0xcc, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0xe4, 0x02, 0x00, 0x00, 0x0d, 0xd0, 0x00, 0x00,
  0xf8, 0x00, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0x13, 0x03, 0x00, 0x00,
  0x0d, 0xd4, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0xe4, 0x02, 0x00, 0x00, 0x0d, 0xd0, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0x13, 0x03, 0x00, 0x00, 0x0d, 0xd4, 0x00, 0x00,
  0xb0, 0x01, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0xaf, 0x03, 0x00, 0x00,
  0x0d, 0xd8, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0xe4, 0x02, 0x00, 0x00, 0x0d, 0xd0, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0xaf, 0x03, 0x00, 0x00, 0x0d, 0xd8, 0x00, 0x00,
  0x70, 0x02, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0x4b, 0x04, 0x00, 0x00,
  0x1a, 0xec, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0x4b, 0x04, 0x00, 0x00, 0x0d, 0xec, 0x00, 0x00, 0x88, 0x02, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0x75, 0x04, 0x00, 0x00, 0x15, 0xfc, 0x00, 0x00,
  0x90, 0x02, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0x75, 0x04, 0x00, 0x00,
  0x24, 0xfc, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0x75, 0x04, 0x00, 0x00, 0x2c, 0xfc, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0x75, 0x04, 0x00, 0x00, 0x10, 0xfc, 0x00, 0x00,
  0xa8, 0x02, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0xb4, 0x04, 0x00, 0x00,
  0x45, 0x00, 0x01, 0x00, 0xb8, 0x02, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0xb4, 0x04, 0x00, 0x00, 0x1e, 0x00, 0x01, 0x00, 0xd0, 0x02, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0xb4, 0x04, 0x00, 0x00, 0x45, 0x00, 0x01, 0x00,
  0xe0, 0x02, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0xb4, 0x04, 0x00, 0x00,
  0x4c, 0x00, 0x01, 0x00, 0xe8, 0x02, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0xb4, 0x04, 0x00, 0x00, 0x4f, 0x00, 0x01, 0x00, 0x08, 0x03, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0x32, 0x05, 0x00, 0x00, 0x14, 0x04, 0x01, 0x00,
  0x10, 0x03, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0x4e, 0x05, 0x00, 0x00,
  0x3c, 0x4c, 0x01, 0x00, 0x18, 0x03, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0x4e, 0x05, 0x00, 0x00, 0x2e, 0x4c, 0x01, 0x00, 0x20, 0x03, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0x4e, 0x05, 0x00, 0x00, 0x15, 0x4c, 0x01, 0x00,
  0x28, 0x03, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0x4e, 0x05, 0x00, 0x00,
  0x21, 0x4c, 0x01, 0x00, 0x30, 0x03, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0x4e, 0x05, 0x00, 0x00, 0x1b, 0x4c, 0x01, 0x00, 0x38, 0x03, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0x4e, 0x05, 0x00, 0x00, 0x27, 0x4c, 0x01, 0x00,
  0x40, 0x03, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0x4e, 0x05, 0x00, 0x00,
  0x37, 0x4c, 0x01, 0x00, 0x48, 0x03, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0x4e, 0x05, 0x00, 0x00, 0x35, 0x4c, 0x01, 0x00, 0x50, 0x03, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0x4e, 0x05, 0x00, 0x00, 0x0f, 0x4c, 0x01, 0x00,
  0x60, 0x03, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0x4e, 0x05, 0x00, 0x00,
  0x15, 0x4c, 0x01, 0x00, 0x68, 0x03, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0x56, 0x02, 0x00, 0x00, 0x1b, 0x50, 0x01, 0x00, 0x80, 0x03, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, 0x0c, 0x54, 0x01, 0x00,
  0x88, 0x03, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00, 0xa6, 0x05, 0x00, 0x00,
  0x0d, 0x58, 0x01, 0x00, 0xb8, 0x03, 0x00, 0x00, 0xde, 0x00, 0x00, 0x00,
  0xd5, 0x05, 0x00, 0x00, 0x15, 0x08, 0x01, 0x00, 0xe0, 0x04, 0x00, 0x00,
  0xde, 0x00, 0x00, 0x00, 0x02, 0x07, 0x00, 0x00, 0x01, 0x6c, 0x01, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x04, 0x00, 0x08, 0x00,
  0x08, 0x7c, 0x0b, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x04, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00,
  0x00, 0x01, 0x00, 0x00, 0x08, 0x01, 0x01, 0xfb, 0x0e, 0x0d, 0x00, 0x01,
  0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x01,
  0x1f, 0x04, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x44, 0x00,
  0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x03, 0x01, 0x1f, 0x02, 0x0f, 0x05,
  0x1e, 0x0a, 0x68, 0x00, 0x00, 0x00, 0x00, 0xcf, 0xe6, 0x35, 0x5f, 0x25,
  0xee, 0x17, 0x6a, 0x66, 0xfe, 0xb7, 0x8e, 0x25, 0x62, 0x35, 0x85, 0x75,
  0x00, 0x00, 0x00, 0x01, 0xb8, 0x10, 0xf2, 0x70, 0x73, 0x3e, 0x10, 0x63,
  0x19, 0xb6, 0x7e, 0xf5, 0x12, 0xc6, 0x24, 0x6e, 0x80, 0x00, 0x00, 0x00,
  0x02, 0x64, 0xbc, 0xf4, 0xb7, 0x31, 0x90, 0x66, 0x82, 0xde, 0x6e, 0x75,
  0x06, 0x79, 0xb9, 0xf4, 0xa2, 0x88, 0x00, 0x00, 0x00, 0x03, 0xba, 0x00,
  0x39, 0xf6, 0xac, 0xc4, 0x71, 0x0a, 0x5f, 0x43, 0x49, 0xe6, 0x28, 0xdd,
  0xfb, 0x60, 0x9a, 0x00, 0x00, 0x00, 0x02, 0x10, 0x80, 0xca, 0x72, 0x88,
  0xc3, 0xb3, 0x7f, 0x03, 0x62, 0x3f, 0x91, 0xcd, 0x87, 0x6e, 0x82, 0xa0,
  0x00, 0x00, 0x00, 0x02, 0xfc, 0xee, 0x41, 0x5b, 0xb1, 0x9d, 0xb8, 0xac,
  0xb9, 0x68, 0xee, 0xda, 0x6f, 0x02, 0xfa, 0x29, 0xa5, 0x00, 0x00, 0x00,
  0x02, 0x14, 0x97, 0x78, 0xac, 0xe3, 0x0a, 0x1f, 0xf2, 0x08, 0xad, 0xc8,
  0x78, 0x3f, 0xd0, 0x4b, 0x29, 0xaa, 0x00, 0x00, 0x00, 0x02, 0x8d, 0x74,
  0xbf, 0x21, 0x33, 0xe7, 0xb3, 0xda, 0xb8, 0x85, 0x99, 0x4b, 0x99, 0x16,
  0xaa, 0x13, 0xb0, 0x00, 0x00, 0x00, 0x02, 0x53, 0xc0, 0xd4, 0x2e, 0x1b,
  0xf6, 0xd9, 0x3b, 0x39, 0x15, 0x17, 0x64, 0xbe, 0x2d, 0x20, 0xfb, 0xb6,
  0x00, 0x00, 0x00, 0x02, 0x16, 0x3f, 0x54, 0xfb, 0x1a, 0xf2, 0xe2, 0x1f,
  0xea, 0x41, 0x0f, 0x14, 0xeb, 0x18, 0xfa, 0x76, 0x04, 0x00, 0x00, 0x09,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1e, 0x01,
  0x05, 0x29, 0x0a, 0x13, 0x05, 0x25, 0x21, 0x06, 0x03, 0x5f, 0x20, 0x05,
  0x0c, 0x06, 0x03, 0x22, 0x20, 0x05, 0x15, 0x34, 0x05, 0x09, 0x06, 0x2e,
  0x05, 0x0d, 0x06, 0x23, 0x05, 0x09, 0x06, 0x20, 0x05, 0x1a, 0x06, 0x30,
  0x05, 0x0d, 0x06, 0x20, 0x05, 0x15, 0x06, 0x22, 0x05, 0x21, 0x06, 0x20,
  0x05, 0x1b, 0x20, 0x05, 0x2e, 0x20, 0x05, 0x27, 0x20, 0x05, 0x3c, 0x20,
  0x05, 0x35, 0x20, 0x05, 0x0f, 0x20, 0x03, 0x51, 0x20, 0x05, 0x1b, 0x06,
  0x03, 0x32, 0x2e, 0x05, 0x0c, 0x3d, 0x05, 0x0d, 0x21, 0x4b, 0xff, 0x21,
  0x59, 0xfe, 0x22, 0x06, 0x03, 0x4a, 0x58, 0x05, 0x1a, 0x06, 0x03, 0x3b,
  0x20, 0x05, 0x0d, 0x06, 0x2e, 0x05, 0x15, 0x06, 0x24, 0x05, 0x24, 0x06,
  0x20, 0x05, 0x2c, 0x20, 0x05, 0x10, 0x20, 0x05, 0x45, 0x06, 0x21, 0x05,
  0x1e, 0x06, 0x2e, 0x05, 0x45, 0x3c, 0x05, 0x4c, 0x2e, 0x05, 0x4f, 0x20,
  0x05, 0x14, 0x06, 0x4b, 0x05, 0x3c, 0x03, 0x12, 0x20, 0x05, 0x2e, 0x06,
  0x20, 0x05, 0x15, 0x20, 0x05, 0x21, 0x20, 0x05, 0x1b, 0x20, 0x05, 0x27,
  0x20, 0x05, 0x37, 0x20, 0x05, 0x35, 0x20, 0x05, 0x0f, 0x20, 0x03, 0xad,
  0x7f, 0x20, 0x05, 0x15, 0x03, 0xd3, 0x00, 0x20, 0x05, 0x1b, 0x06, 0x21,
  0x05, 0x0c, 0x3d, 0x05, 0x0d, 0x21, 0x06, 0x03, 0xaa, 0x7f, 0x4a, 0x05,
  0x15, 0x06, 0x03, 0xc2, 0x00, 0x2e, 0x05, 0x01, 0x03, 0x19, 0x02, 0x25,
  0x01, 0x02, 0x02, 0x00, 0x01, 0x01, 0x2f, 0x72, 0x6f, 0x6f, 0x74, 0x2f,
  0x72, 0x65, 0x70, 0x6f, 0x73, 0x2f, 0x6e, 0x65, 0x74, 0x69, 0x66, 0x79,
  0x2d, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x2f, 0x65, 0x62, 0x70, 0x66,
  0x5f, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65,
  0x00, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
  0x65, 0x2f, 0x61, 0x73, 0x6d, 0x2d, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69,
  0x63, 0x00, 0x2f, 0x75, 0x73, 0x72, 0x2f, 0x69, 0x6e, 0x63, 0x6c, 0x75,
  0x64, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x75, 0x78, 0x00, 0x2f, 0x75, 0x73,
  0x72, 0x2f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x2f, 0x62, 0x70,
  0x66, 0x00, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x70, 0x66,
  0x2e, 0x63, 0x00, 0x69, 0x6e, 0x74, 0x2d, 0x6c, 0x6c, 0x36, 0x34, 0x2e,
  0x68, 0x00, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x68, 0x00, 0x62, 0x70,
  0x66, 0x5f, 0x68, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x5f, 0x64, 0x65, 0x66,
  0x73, 0x2e, 0x68, 0x00, 0x62, 0x70, 0x66, 0x2e, 0x68, 0x00, 0x69, 0x6e,
  0x2e, 0x68, 0x00, 0x69, 0x70, 0x2e, 0x68, 0x00, 0x74, 0x63, 0x70, 0x2e,
  0x68, 0x00, 0x75, 0x64, 0x70, 0x2e, 0x68, 0x00, 0x69, 0x66, 0x5f, 0x65,
  0x74, 0x68, 0x65, 0x72, 0x2e, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x01, 0x00, 0x00,
  0x04, 0x00, 0xf1, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x00, 0xe0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5b, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x00, 0x70, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x06, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00,
  0x01, 0x00, 0x06, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x00, 0xa8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x00, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8b, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x00, 0x20, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x03, 0x00, 0xb8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7a, 0x01, 0x00, 0x00,
  0x01, 0x00, 0x06, 0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00,
  0x01, 0x00, 0x06, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x16, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb1, 0x00, 0x00, 0x00,
  0x12, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x05, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x01, 0x00, 0x00,
  0x11, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
  0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0xb8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x1a, 0x00, 0x00, 0x00, 0xe8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x68, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00,
  0x88, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0xb8, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x12, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x11, 0x00, 0x00, 0x00, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xec, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x08, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x10, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x14, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x2c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x34, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x38, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x3c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x44, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x4c, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x54, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x58, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x5c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x68, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x7c, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x84, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x8c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x98, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xa4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xac, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xb0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xbc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xc8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0xd4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x13, 0x00, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x00, 0x00,
  0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x19, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x38, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x44, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00,
  0x50, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x68, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x74, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x0e, 0x00, 0x00, 0x00, 0x8c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00,
  0xb0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x1b, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x10, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x70, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0xa0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0xd0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x30, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x60, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x90, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xb0, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0xc0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0xf0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x20, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x50, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x80, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x90, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
  0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0xcd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x17, 0x00, 0x00, 0x00, 0xe2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x00, 0x00,
  0x11, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
  0x02, 0x00, 0x00, 0x00, 0x18, 0x19, 0x05, 0x06, 0x07, 0x1a, 0x0d, 0x0c,
  0x1b, 0x1c, 0x00, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x61, 0x62,
  0x62, 0x72, 0x65, 0x76, 0x00, 0x2e, 0x74, 0x65, 0x78, 0x74, 0x00, 0x2e,
  0x72, 0x65, 0x6c, 0x2e, 0x42, 0x54, 0x46, 0x2e, 0x65, 0x78, 0x74, 0x00,
  0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x5f, 0x5f, 0x5f, 0x5f, 0x66,
  0x6d, 0x74, 0x00, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x5f, 0x5f,
  0x5f, 0x66, 0x6d, 0x74, 0x00, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
  0x72, 0x6e, 0x67, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x00, 0x2e, 0x64, 0x65,
  0x62, 0x75, 0x67, 0x5f, 0x6c, 0x6f, 0x63, 0x6c, 0x69, 0x73, 0x74, 0x73,
  0x00, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
  0x73, 0x74, 0x72, 0x5f, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x73, 0x00,
  0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72,
  0x73, 0x00, 0x79, 0x6f, 0x75, 0x74, 0x75, 0x62, 0x65, 0x5f, 0x69, 0x70,
  0x73, 0x00, 0x2e, 0x6d, 0x61, 0x70, 0x73, 0x00, 0x2e, 0x64, 0x65, 0x62,
  0x75, 0x67, 0x5f, 0x73, 0x74, 0x72, 0x00, 0x2e, 0x64, 0x65, 0x62, 0x75,
  0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x00, 0x66,
  0x69, 0x6c, 0x74, 0x65, 0x72, 0x00, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64,
  0x65, 0x62, 0x75, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x00, 0x2e, 0x72,
  0x65, 0x6c, 0x78, 0x64, 0x70, 0x00, 0x6d, 0x79, 0x5f, 0x6d, 0x61, 0x70,
  0x00, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f,
  0x69, 0x6e, 0x66, 0x6f, 0x00, 0x2e, 0x6c, 0x6c, 0x76, 0x6d, 0x5f, 0x61,
  0x64, 0x64, 0x72, 0x73, 0x69, 0x67, 0x00, 0x6c, 0x69, 0x63, 0x65, 0x6e,
  0x73, 0x65, 0x00, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62, 0x75,
  0x67, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x00, 0x2e, 0x72, 0x65, 0x6c, 0x2e,
  0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x00,
  0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x62, 0x70, 0x66, 0x2e, 0x63,
  0x00, 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00, 0x2e, 0x73, 0x79,
  0x6d, 0x74, 0x61, 0x62, 0x00, 0x2e, 0x72, 0x6f, 0x64, 0x61, 0x74, 0x61,
  0x00, 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x42, 0x54, 0x46, 0x00, 0x4c, 0x49,
  0x43, 0x45, 0x4e, 0x53, 0x45, 0x00, 0x4c, 0x42, 0x42, 0x30, 0x5f, 0x39,
  0x00, 0x4c, 0x42, 0x42, 0x30, 0x5f, 0x36, 0x00, 0x4c, 0x42, 0x42, 0x30,
  0x5f, 0x31, 0x36, 0x00, 0x4c, 0x42, 0x42, 0x30, 0x5f, 0x31, 0x35, 0x00,
  0x4c, 0x42, 0x42, 0x30, 0x5f, 0x31, 0x34, 0x00, 0x66, 0x69, 0x6c, 0x74,
  0x65, 0x72, 0x2e, 0x5f, 0x5f, 0x5f, 0x5f, 0x66, 0x6d, 0x74, 0x2e, 0x33,
  0x00, 0x4c, 0x42, 0x42, 0x30, 0x5f, 0x31, 0x32, 0x00, 0x66, 0x69, 0x6c,
  0x74, 0x65, 0x72, 0x2e, 0x5f, 0x5f, 0x5f, 0x66, 0x6d, 0x74, 0x2e, 0x32,
  0x00, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x5f, 0x5f, 0x5f, 0x66,
  0x6d, 0x74, 0x2e, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x2b, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xca, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xf0, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc8, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x90, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x01, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x05, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xf5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x2a, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x37, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xeb, 0x06, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xdb, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xa3, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x05, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xd7, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x20, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x0a, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x0e, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x63, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x74, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x60, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x0d, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x10, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xbc, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc0, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xe0, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x01, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x15, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x2d, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x43, 0x01, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xb0, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x60, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xa0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00,
  0x09, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x33, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x11, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0d, 0x01, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00,
  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xb0, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
  0x16, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x24, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xfd, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd0, 0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x16, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00,
  0x03, 0x4c, 0xff, 0x6f, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x37, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x33, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xd8, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00
};
unsigned int filter_bpf_o_len = 16576;


    struct bpf_object *obj;
    struct bpf_map *map_ptr;
    int ret;
    // obj = bpf_object__open_file("filter.bpf.o", NULL);
    obj = bpf_object__open_mem(filter_bpf_o, filter_bpf_o_len, NULL);
    ret = bpf_object__load(obj);
    if (ret) {
        fprintf(stderr, "Failed to load BPF object\n");
        return;
    }
    map_ptr = bpf_object__find_map_by_name(obj, "my_map");
    youtube_map_ptr = bpf_object__find_map_fd_by_name(obj, "youtube_ips");
    if (youtube_map_ptr < 0) {
      fprintf(stderr,"Failed to get map file descriptor for youtube map");
    } else {
      ;
      // __be32 blocked_ip[] = {convertIpToBe32("192.168.1.4"), convertIpToBe32("10.1.1.163"), convertIpToBe32("10.1.1.98")};
      // __u8 value = 1;
      // for (size_t i = 0; i < sizeof(blocked_ip) / sizeof(blocked_ip[0]); i++) {
      //   bpf_map_update_elem(youtube_map_ptr, &blocked_ip[i], &value, BPF_ANY);
      // }
      // bpf_map_update_elem(youtube_map_ptr, &blocked_ip, 1, BPF_ANY);
    }
    map_fd = bpf_map__fd(map_ptr);
    std::cout <<"map fd: " << map_fd << std::endl;

    if (map_fd < 0) {
        fprintf(stderr, "Failed to get map file descriptor\n");
        return;
    }
    std::cout << last_interface << std::endl;
    int if_index = if_nametoindex(last_interface.c_str());
    
    if(if_index == 0) {
        fprintf(stderr, "Failed to get if_index\n");
        return;
    }


    ret = bpf_link_create(
        bpf_program__fd(bpf_object__find_program_by_name(obj, "filter")),
        if_index,
        BPF_XDP,
        0
        );

    if(ret < 0) {
        fprintf(stderr, "Failed to attach XDP program\n");
        return;
    }
}

void block_website(std::string local_ip, std::string other_ip, uint16_t local_port, uint16_t other_port) {
    __be32 index = 0;
    __be32 local_ip_hex = convertIpToBe32(local_ip);
    __be32 other_ip_hex = convertIpToBe32(other_ip);
    index = local_ip_hex ^ other_ip_hex ^ convertPortToBe16(local_port) ^ convertPortToBe16(other_port);
    int _ret;
    int value = 1;
    if(local_ip_hex == 0 || other_ip_hex == 0) {
        std::cout << "Invalid IP address\n";
        return;
    } else {
      _ret = bpf_map_update_elem(map_fd, &index, &value, BPF_ANY);
    }
    printf("IP is: %s, hex:0x%x\n", local_ip.c_str(), convertIpToBe32(other_ip));
    std::cout << (_ret?"Failed to block website\n":"Website blocked successfully\n");
}

__be32 convertIpToBe32(const std::string& ip) {
    struct in_addr addr;
    // std::cout << "IP is:" << ip << std::endl;
    if (inet_pton(AF_INET, ip.c_str(), &addr) != 1)
      return 0;
        // throw std::invalid_argument("Invalid IP address format");
    return addr.s_addr;
}

__be16 convertPortToBe16(uint16_t port) {
    return htons(port);
}

void remove_bpf_map_entry(__be32 index) {
    int _ret = bpf_map_delete_elem(map_fd, &index);
    std::cout << "Index: " << index << std::endl;
    std::cout << (_ret?"Flow Purged\n":"Flow Deleted from the map\n");;
}

DatabaseManager::DatabaseManager(const string& host, const string& user, const string& password, const string& dbname)
    : host(host), user(user), password(password), dbname(dbname) {
    try {
        driver = get_driver_instance();
        con = driver->connect(host, user, password);
        con->setSchema(dbname);
    } catch (sql::SQLException &e) {
        cerr << "# ERR: SQLException in " << __FILE__;
        cerr << "(" << __FUNCTION__ << ") on line " << __LINE__ << endl;
        cerr << "# ERR: " << e.what();
        cerr << " (MySQL error code: " << e.getErrorCode();
        cerr << ", SQLState: " << e.getSQLState() << " )" << endl;
        throw;
    }

    std::cout << "Connected to database: " << dbname << " at " << host << std::endl;

    fetchUserIPMapping();
    // fetchBlockedApplications();
    // fetchBlockedWebsites();
}

DatabaseManager::~DatabaseManager() {
    if (con) {
        delete con;
    }
}

void DatabaseManager::fetchUserIPMapping() {
    try {
        std::cout << "Fetching user-to-IP mappings..." << std::endl;
        unique_ptr<sql::Statement> stmt(con->createStatement());
        unique_ptr<sql::ResultSet> res(stmt->executeQuery("SELECT ip, user_id FROM user_onlines"));

        while (res->next()) {
            string ip = res->getString("ip");
            int user_id = res->getInt("user_id");
            ip_user_mapping[ip] = user_id;
            std::cout << "IP: " << ip << " User ID: " << user_id << std::endl;
        }
    } catch (sql::SQLException &e) {
        cerr << "Error fetching user-to-IP mappings: " << e.what() << endl;
    }
}

void DatabaseManager::fetchBlockedApplications() {
    try {
        std::cout << "Fetching blocked applications..." << std::endl;
        unique_ptr<sql::Statement> stmt(con->createStatement());
        unique_ptr<sql::ResultSet> res(stmt->executeQuery("SELECT a.user_id AS id, a.application_id AS app, u.ip AS ip FROM netify_blocked_applications as a JOIN user_onlines AS u ON a.user_id=u.user_id"));

        while (res->next()) {
            int user_id = res->getInt("id");
            int app_id = res->getInt("app");
            std::string ip = res->getString("ip");
            __be32 ip_addr = convertIpToBe32(ip);
            std::cout << " app id:" << app_id << " user_id:"  << user_id << std::endl;
            blocked_applications[user_id].insert(app_id);
            if(app_id==123) {
              bpf_map_update_elem(youtube_map_ptr, &ip_addr, &user_id, BPF_ANY);
            }
        }
    } catch (sql::SQLException &e) {
        cerr << "Error fetching blocked applications: " << e.what() << endl;
    }
}

void DatabaseManager::fetchBlockedWebsites() {
    try {
        std::cout << "Fetching blocked websites..." << std::endl;
        unique_ptr<sql::Statement> stmt(con->createStatement());
        unique_ptr<sql::ResultSet> res(stmt->executeQuery("SELECT user_id, website FROM netify_user_blocked_websites"));

        while (res->next()) {
            int user_id = res->getInt("user_id");
            string website = res->getString("website");
            user_blocked_websites[user_id].insert(website);
            std::cout << " website:  "<< website <<" user id:" << user_id << std::endl;
        }
    } catch (sql::SQLException &e) {
        cerr << "Error fetching blocked websites: " << e.what() << endl;
    }
}
